{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:48:04.498Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T12:48:04.501Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:48:04.501Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T12:48:04.502Z'
}
{
  message: 'Request failed with status code 404',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.9',
      'Content-Length': '568',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'put',
    url: 'https://kimharald.no/api/weather/payload',
    data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"}],"hash":"70da58ca5ef983568347bbc2973b8e74"}'
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '568',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    socket: TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'kimharald.no',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener]
      },
      _eventsCount: 9,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'kimharald.no',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 323672,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: true,
        destroyed: true,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: true,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: null,
      _requestCert: true,
      _rejectUnauthorized: true,
      parser: null,
      _httpMessage: [Circular *1],
      [Symbol(alpncallback)]: null,
      [Symbol(res)]: null,
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 126,
      [Symbol(kHandle)]: null,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 459,
      [Symbol(kBytesWritten)]: 811,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '568',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'kimharald.no',
        port: 443,
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                },
                list: [ 'kimharald.no:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
            },
            list: [ 'kimharald.no:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        host: 'kimharald.no',
        noDelay: true,
        servername: 'kimharald.no',
        _agentKey: 'kimharald.no:443:::::::::::::::::::::',
        encoding: null,
        singleUse: true
      }
    },
    _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/1.7.9\r\n' +
      'Content-Length: 568\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: kimharald.no\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] { noDelay: true, path: null },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
        },
        list: [ 'kimharald.no:443:::::::::::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'PUT',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/api/weather/payload',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: false,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: true
      },
      _events: [Object: null prototype] {
        end: [
          [Function: responseOnEnd],
          [Function: onend],
          [Function: onend]
        ],
        close: [
          [Function (anonymous)],
          [Function: onclose],
          [Function: onclose]
        ],
        finish: [ [Function: onfinish], [Function: onfinish] ],
        error: [
          [Function: onerror],
          [Function: onError],
          [Function: onerror]
        ]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'kimharald.no',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener]
        },
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'kimharald.no',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 323672,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: true,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: true,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: null,
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 459,
        [Symbol(kBytesWritten)]: 811,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '568',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'kimharald.no',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                  },
                  list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
              },
              list: [ 'kimharald.no:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'kimharald.no',
          noDelay: true,
          servername: 'kimharald.no',
          _agentKey: 'kimharald.no:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Server',
        'nginx/1.24.0 (Ubuntu)',
        'Date',
        'Thu, 20 Feb 2025 12:48:15 GMT',
        'Content-Type',
        'text/html; charset=utf-8',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff',
        'Content-Encoding',
        'gzip'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 404,
      statusMessage: 'Not Found',
      client: TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'kimharald.no',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener]
        },
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'kimharald.no',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 323672,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: true,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: true,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: null,
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 459,
        [Symbol(kBytesWritten)]: 811,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '568',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'kimharald.no',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                  },
                  list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
              },
              list: [ 'kimharald.no:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'kimharald.no',
          noDelay: true,
          servername: 'kimharald.no',
          _agentKey: 'kimharald.no:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      responseUrl: 'https://kimharald.no/api/weather/payload',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        server: 'nginx/1.24.0 (Ubuntu)',
        date: 'Thu, 20 Feb 2025 12:48:15 GMT',
        'content-type': 'text/html; charset=utf-8',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'x-powered-by': 'Express',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff'
      },
      [Symbol(kHeadersCount)]: 18,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'kimharald.no',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/api/weather/payload',
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '568',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'kimharald.no',
        port: '',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                },
                list: [ 'kimharald.no:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 568,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'https://kimharald.no/api/weather/payload',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
      'content-length': [ 'Content-Length', '568' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'kimharald.no' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 404,
    statusText: 'Not Found',
    headers: Object [AxiosHeaders] {
      server: 'nginx/1.24.0 (Ubuntu)',
      date: 'Thu, 20 Feb 2025 12:48:15 GMT',
      'content-type': 'text/html; charset=utf-8',
      'transfer-encoding': 'chunked',
      connection: 'close',
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.7.9',
        'Content-Length': '568',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'put',
      url: 'https://kimharald.no/api/weather/payload',
      data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"}],"hash":"70da58ca5ef983568347bbc2973b8e74"}'
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '568',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      socket: TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'kimharald.no',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener]
        },
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'kimharald.no',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 323672,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: true,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: true,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: null,
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 459,
        [Symbol(kBytesWritten)]: 811,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '568',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'kimharald.no',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                  },
                  list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
              },
              list: [ 'kimharald.no:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          host: 'kimharald.no',
          noDelay: true,
          servername: 'kimharald.no',
          _agentKey: 'kimharald.no:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.7.9\r\n' +
        'Content-Length: 568\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: kimharald.no\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
          },
          list: [ 'kimharald.no:443:::::::::::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/weather/payload',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: false,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: true
        },
        _events: [Object: null prototype] {
          end: [
            [Function: responseOnEnd],
            [Function: onend],
            [Function: onend]
          ],
          close: [
            [Function (anonymous)],
            [Function: onclose],
            [Function: onclose]
          ],
          finish: [ [Function: onfinish], [Function: onfinish] ],
          error: [
            [Function: onerror],
            [Function: onError],
            [Function: onerror]
          ]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'kimharald.no',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'kimharald.no',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 323672,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: null,
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 459,
          [Symbol(kBytesWritten)]: 811,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '568',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'kimharald.no',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                    },
                    list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                },
                list: [ 'kimharald.no:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'kimharald.no',
            noDelay: true,
            servername: 'kimharald.no',
            _agentKey: 'kimharald.no:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Server',
          'nginx/1.24.0 (Ubuntu)',
          'Date',
          'Thu, 20 Feb 2025 12:48:15 GMT',
          'Content-Type',
          'text/html; charset=utf-8',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'X-Powered-By',
          'Express',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff',
          'Content-Encoding',
          'gzip'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'kimharald.no',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'kimharald.no',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 323672,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: null,
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 459,
          [Symbol(kBytesWritten)]: 811,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '568',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'kimharald.no',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                    },
                    list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                },
                list: [ 'kimharald.no:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'kimharald.no',
            noDelay: true,
            servername: 'kimharald.no',
            _agentKey: 'kimharald.no:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'https://kimharald.no/api/weather/payload',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          server: 'nginx/1.24.0 (Ubuntu)',
          date: 'Thu, 20 Feb 2025 12:48:15 GMT',
          'content-type': 'text/html; charset=utf-8',
          'transfer-encoding': 'chunked',
          connection: 'close',
          'x-powered-by': 'Express',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff'
        },
        [Symbol(kHeadersCount)]: 18,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'kimharald.no',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/api/weather/payload',
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '568',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'kimharald.no',
          port: '',
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'kimharald.no:443:::::::::::::::::::::': <Buffer 30 82 04 48 02 01 01 02 02 03 04 04 02 13 02 04 20 2a 11 bd 08 5e 72 3b 29 5a 40 ad 47 eb 13 65 ec 11 d0 72 5a af a7 f6 72 4b 39 a6 66 9b e9 d0 4b 04 ... 1050 more bytes>
                  },
                  list: [ 'kimharald.no:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 568,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'https://kimharald.no/api/weather/payload',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
        'content-length': [ 'Content-Length', '568' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'kimharald.no' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>Cannot PUT /api/weather/payload</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 404,
  level: 'error',
  timestamp: '2025-02-20T12:48:25.065Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:48:25.153Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:48:25.199Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:48:25.245Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T12:48:25.246Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:48:25.291Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:48:35.158Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:48:35.203Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:48:35.249Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T12:48:35.250Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:48:35.295Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:48:45.168Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:48:45.214Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:48:45.260Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T12:48:45.260Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:48:45.307Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:48:55.173Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:48:55.219Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:48:55.265Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T12:48:55.266Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:48:55.311Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:49:05.036Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T12:49:05.039Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:49:05.039Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T12:49:05.040Z'
}
{
  code: 'DEPTH_ZERO_SELF_SIGNED_CERT',
  message: 'self-signed certificate',
  name: 'Error',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.9',
      'Content-Length': '568',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'put',
    url: 'https://adamantum/api/weather/payload',
    data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"}],"hash":"70da58ca5ef983568347bbc2973b8e74"}'
  },
  request: <ref *3> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [Function: handleRequestSocket]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'https:',
      path: '/api/weather/payload',
      method: 'PUT',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.7.9',
        'Content-Length': '568',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'adamantum',
      port: '',
      agent: undefined,
      nativeProtocols: <ref *4> {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',         'BIND',       'CHECKOUT',
            'CONNECT',     'COPY',       'DELETE',
            'GET',         'HEAD',       'LINK',
            'LOCK',        'M-SEARCH',   'MERGE',
            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
            'MOVE',        'NOTIFY',     'OPTIONS',
            'PATCH',       'POST',       'PROPFIND',
            'PROPPATCH',   'PURGE',      'PUT',
            'REBIND',      'REPORT',     'SEARCH',
            'SOURCE',      'SUBSCRIBE',  'TRACE',
            'UNBIND',      'UNLINK',     'UNLOCK',
            'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: __node_internal_],
          validateHeaderValue: [Function: __node_internal_],
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443:::::::::::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: true,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [
                      [Function: onConnectEnd],
                      [Function: onReadableStreamEnd]
                    ],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    drain: [Function: ondrain]
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: true,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 62552,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: Error: self-signed certificate
                        at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
                        at TLSSocket.emit (node:events:517:28)
                        at TLSSocket._finishInit (node:_tls_wrap:1070:8)
                        at ssl.onhandshakedone (node:_tls_wrap:856:12)
                        at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
                      code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
                    },
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 808,
                    writing: true,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: [Function (anonymous)],
                    writelen: 808,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: true,
                    emitClose: false,
                    autoDestroy: true,
                    errored: Error: self-signed certificate
                        at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
                        at TLSSocket.emit (node:events:517:28)
                        at TLSSocket._finishInit (node:_tls_wrap:1070:8)
                        at ssl.onhandshakedone (node:_tls_wrap:856:12)
                        at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
                      code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
                    },
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: ClientRequest {
                    _events: [Object: null prototype] {
                      response: [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      abort: [Function (anonymous)],
                      aborted: [Function (anonymous)],
                      connect: [Function (anonymous)],
                      error: [Function (anonymous)],
                      socket: [Function (anonymous)],
                      timeout: [Function (anonymous)]
                    },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    outputData: [],
                    outputSize: 0,
                    writable: true,
                    destroyed: false,
                    _last: true,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    maxRequestsOnConnectionReached: false,
                    _defaultKeepAlive: true,
                    useChunkedEncodingByDefault: true,
                    sendDate: false,
                    _removedConnection: false,
                    _removedContLen: false,
                    _removedTE: false,
                    strictContentLength: false,
                    _contentLength: '568',
                    _hasBody: true,
                    _trailer: '',
                    finished: false,
                    _headerSent: true,
                    _closed: false,
                    socket: [Circular *1],
                    _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                      'Accept: application/json, text/plain, */*\r\n' +
                      'Content-Type: application/json\r\n' +
                      'User-Agent: axios/1.7.9\r\n' +
                      'Content-Length: 568\r\n' +
                      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                      'Host: adamantum\r\n' +
                      'Connection: close\r\n' +
                      '\r\n',
                    _keepAliveTimeout: 0,
                    _onPendingData: [Function: nop],
                    agent: [Circular *2],
                    socketPath: undefined,
                    method: 'PUT',
                    maxHeaderSize: undefined,
                    insecureHTTPParser: undefined,
                    joinDuplicateHeaders: undefined,
                    path: '/api/weather/payload',
                    _ended: false,
                    res: null,
                    aborted: false,
                    timeoutCb: null,
                    upgradeOrConnect: false,
                    parser: null,
                    maxHeadersCount: null,
                    reusedSocket: false,
                    host: 'adamantum',
                    protocol: 'https:',
                    _redirectable: [Circular *3],
                    [Symbol(kCapture)]: false,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(kNeedDrain)]: false,
                    [Symbol(corked)]: 0,
                    [Symbol(kOutHeaders)]: [Object: null prototype] {
                      accept: [ 'Accept', 'application/json, text/plain, */*' ],
                      'content-type': [ 'Content-Type', 'application/json' ],
                      'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                      'content-length': [ 'Content-Length', '568' ],
                      'accept-encoding': [
                        'Accept-Encoding',
                        'gzip, compress, deflate, br'
                      ],
                      host: [ 'Host', 'adamantum' ]
                    },
                    [Symbol(errored)]: null,
                    [Symbol(kHighWaterMark)]: 16384,
                    [Symbol(kRejectNonStandardBodyWrites)]: false,
                    [Symbol(kUniqueHeaders)]: null
                  },
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: false,
                  [Symbol(pendingSession)]: <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 d5 5b 64 e9 9d be 81 63 8c 19 99 ec 91 7b 0b c1 3a 93 30 e3 09 d4 d0 d1 07 fd c2 73 d1 62 51 00 04 ... 978 more bytes>,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 808,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 808,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '568',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: [Circular *4],
                    pathname: '/api/weather/payload',
                    _defaultAgent: [Circular *2],
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/api/weather/payload'
    },
    _ended: false,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 568,
    _requestBodyBuffers: [
      {
        data: <Buffer 7b 22 64 61 74 61 22 3a 5b 7b 22 74 65 6d 70 65 72 61 74 75 72 65 22 3a 32 39 34 2e 39 38 2c 22 70 72 65 73 73 75 72 65 22 3a 31 30 31 32 34 38 2c 22 ... 518 more bytes>,
        encoding: undefined
      }
    ],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *5> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '568',
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: true,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [ [Function: onConnectEnd], [Function: onReadableStreamEnd] ],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          drain: [Function: ondrain]
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 62552,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: Error: self-signed certificate
              at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
              at TLSSocket.emit (node:events:517:28)
              at TLSSocket._finishInit (node:_tls_wrap:1070:8)
              at ssl.onhandshakedone (node:_tls_wrap:856:12)
              at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
            code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
          },
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: true,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 808,
          writing: true,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: [Function (anonymous)],
          writelen: 808,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: true,
          emitClose: false,
          autoDestroy: true,
          errored: Error: self-signed certificate
              at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
              at TLSSocket.emit (node:events:517:28)
              at TLSSocket._finishInit (node:_tls_wrap:1070:8)
              at ssl.onhandshakedone (node:_tls_wrap:856:12)
              at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
            code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
          },
          closed: true,
          closeEmitted: true,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: null,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *5],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1],
            [Symbol(handle_onclose)]: [Function: done]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: false,
        [Symbol(pendingSession)]: <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 d5 5b 64 e9 9d be 81 63 8c 19 99 ec 91 7b 0b c1 3a 93 30 e3 09 d4 d0 d1 07 fd c2 73 d1 62 51 00 04 ... 978 more bytes>,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: null,
        [Symbol(lastWriteQueueSize)]: 808,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 808,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '568',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: undefined,
          nativeProtocols: <ref *4> {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443:::::::::::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443:::::::::::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443:::::::::::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.7.9\r\n' +
        'Content-Length: 568\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: adamantum\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] { noDelay: true, path: null },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443:::::::::::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: true,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [
                  [Function: onConnectEnd],
                  [Function: onReadableStreamEnd]
                ],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                drain: [Function: ondrain]
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 62552,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: Error: self-signed certificate
                    at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
                    at TLSSocket.emit (node:events:517:28)
                    at TLSSocket._finishInit (node:_tls_wrap:1070:8)
                    at ssl.onhandshakedone (node:_tls_wrap:856:12)
                    at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
                  code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
                },
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: false,
                needDrain: false,
                ending: false,
                ended: false,
                finished: false,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 808,
                writing: true,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: [Function (anonymous)],
                writelen: 808,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: true,
                emitClose: false,
                autoDestroy: true,
                errored: Error: self-signed certificate
                    at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
                    at TLSSocket.emit (node:events:517:28)
                    at TLSSocket._finishInit (node:_tls_wrap:1070:8)
                    at ssl.onhandshakedone (node:_tls_wrap:856:12)
                    at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
                  code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
                },
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *5],
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: false,
              [Symbol(pendingSession)]: <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 d5 5b 64 e9 9d be 81 63 8c 19 99 ec 91 7b 0b c1 3a 93 30 e3 09 d4 d0 d1 07 fd c2 73 d1 62 51 00 04 ... 978 more bytes>,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 808,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 808,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '568',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: [Circular *2],
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: [Circular *2],
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: { map: {}, list: [] },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/weather/payload',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'adamantum',
      protocol: 'https:',
      _redirectable: [Circular *3],
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
        'content-length': [ 'Content-Length', '568' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'adamantum' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: 'https://adamantum/api/weather/payload',
    [Symbol(kCapture)]: false
  },
  cause: Error: self-signed certificate
      at TLSSocket.onConnectSecure (node:_tls_wrap:1659:34)
      at TLSSocket.emit (node:events:517:28)
      at TLSSocket._finishInit (node:_tls_wrap:1070:8)
      at ssl.onhandshakedone (node:_tls_wrap:856:12)
      at TLSWrap.callbackTrampoline (node:internal/async_hooks:128:17) {
    code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
  },
  level: 'error',
  timestamp: '2025-02-20T12:49:18.986Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:49:20.368Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:49:20.414Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:49:20.460Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T12:49:20.460Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:49:20.506Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:49:30.367Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:49:30.412Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:49:30.458Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T12:49:30.459Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:49:30.505Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:49:40.368Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:49:40.414Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:49:40.460Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T12:49:40.461Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:49:40.506Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:49:50.370Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:49:50.416Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:49:50.462Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T12:49:50.462Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:49:50.508Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.053Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.371Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.416Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.462Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.462Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:00.509Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:10.372Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:10.417Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:10.463Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:10.464Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:10.509Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:20.373Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:20.419Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:20.464Z'
}
{
  message: '{"temperature":24.57761904761901,"pressure":8437.404761904761,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:20.465Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:20.510Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:30.376Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:30.422Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:30.468Z'
}
{
  message: '{"temperature":19.662333333333287,"pressure":6749.966666666666,"humidity":1.8}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:30.468Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:30.514Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:40.377Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:40.424Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:40.470Z'
}
{
  message: '{"temperature":16.088606060606033,"pressure":5522.618181818182,"humidity":1.4727272727272727}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:40.470Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:40.515Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:50:50.378Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:50:50.423Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:50:50.469Z'
}
{
  message: '{"temperature":13.407090909090899,"pressure":4602.218181818182,"humidity":1.2272727272727273}',
  level: 'debug',
  timestamp: '2025-02-20T12:50:50.469Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:50:50.514Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:51:00.381Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:51:00.428Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:51:00.473Z'
}
{
  message: '{"temperature":11.344405594405561,"pressure":3894.2097902097903,"humidity":1.0384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T12:51:00.474Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:51:00.520Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:51:10.381Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:51:10.426Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:51:10.471Z'
}
{
  message: '{"temperature":9.723736263736233,"pressure":3337.912087912088,"humidity":0.8901098901098901}',
  level: 'debug',
  timestamp: '2025-02-20T12:51:10.472Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:51:10.517Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:51:20.382Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:51:20.427Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:51:20.472Z'
}
{
  message: '{"temperature":8.427208791208765,"pressure":2892.8703296703297,"humidity":0.7714285714285715}',
  level: 'debug',
  timestamp: '2025-02-20T12:51:20.472Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:51:20.518Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:51:30.384Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:51:30.429Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:51:30.474Z'
}
{
  message: '{"temperature":7.373785714285706,"pressure":2531.2714285714287,"humidity":0.675}',
  level: 'debug',
  timestamp: '2025-02-20T12:51:30.474Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:51:30.520Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:51:40.384Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:51:40.429Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:51:40.474Z'
}
{
  message: '{"temperature":6.505823529411753,"pressure":2233.4382352941175,"humidity":0.5955882352941176}',
  level: 'debug',
  timestamp: '2025-02-20T12:51:40.475Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:51:40.521Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:56:20.785Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T12:56:20.788Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:56:20.788Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T12:56:20.789Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:56:40.120Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:56:40.166Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:56:40.212Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T12:56:40.213Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:56:40.259Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:56:50.122Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:56:50.168Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:56:50.220Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T12:56:50.221Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:56:50.274Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:57:00.127Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:57:00.172Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:57:00.321Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T12:57:00.322Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:57:00.368Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:57:10.132Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:57:10.178Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:57:10.223Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T12:57:10.224Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:57:10.272Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:57:20.137Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:57:20.182Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:57:20.228Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T12:57:20.228Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:57:20.274Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:57:30.144Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:57:30.191Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:57:30.237Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T12:57:30.238Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:57:30.284Z'
}
{
  message: 'Request failed with status code 504',
  name: 'AxiosError',
  code: 'ERR_BAD_RESPONSE',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.9',
      'Content-Length': '697',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    httpsAgent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: <ref *3> ClientRequest {
              _events: [Object: null prototype] {
                abort: [Function (anonymous)],
                aborted: [Function (anonymous)],
                connect: [Function (anonymous)],
                error: [Function (anonymous)],
                socket: [Function (anonymous)],
                timeout: [Function (anonymous)],
                finish: [Function: requestOnFinish]
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              outputData: [],
              outputSize: 0,
              writable: true,
              destroyed: false,
              _last: true,
              chunkedEncoding: false,
              shouldKeepAlive: false,
              maxRequestsOnConnectionReached: false,
              _defaultKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: false,
              _removedConnection: false,
              _removedContLen: false,
              _removedTE: false,
              strictContentLength: false,
              _contentLength: '697',
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              _closed: false,
              socket: [Circular *1],
              _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.7.9\r\n' +
                'Content-Length: 697\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: adamantum\r\n' +
                'Connection: close\r\n' +
                '\r\n',
              _keepAliveTimeout: 0,
              _onPendingData: [Function: nop],
              agent: [Circular *2],
              socketPath: undefined,
              method: 'PUT',
              maxHeaderSize: undefined,
              insecureHTTPParser: undefined,
              joinDuplicateHeaders: undefined,
              path: '/api/weather/payload',
              _ended: true,
              res: IncomingMessage {
                _readableState: ReadableState {
                  state: 456758,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: responseOnEnd],
                    [Function: handleStreamEnd]
                  ],
                  error: [Function: handleStreamError],
                  data: [Function: handleStreamData],
                  aborted: [Function: handlerStreamAborted]
                },
                _eventsCount: 4,
                _maxListeners: undefined,
                socket: [Circular *1],
                httpVersionMajor: 1,
                httpVersionMinor: 1,
                httpVersion: '1.1',
                complete: true,
                rawHeaders: [
                  'Server',
                  'nginx/1.24.0 (Ubuntu)',
                  'Date',
                  'Thu, 20 Feb 2025 12:57:34 GMT',
                  'Content-Type',
                  'text/html',
                  'Content-Length',
                  '176',
                  'Connection',
                  'close'
                ],
                rawTrailers: [],
                joinDuplicateHeaders: undefined,
                aborted: false,
                upgrade: false,
                url: '',
                method: null,
                statusCode: 504,
                statusMessage: 'Gateway Time-out',
                client: [Circular *1],
                _consuming: false,
                _dumped: false,
                req: [Circular *3],
                responseUrl: 'https://adamantum/api/weather/payload',
                redirects: [],
                [Symbol(kCapture)]: false,
                [Symbol(kHeaders)]: {
                  server: 'nginx/1.24.0 (Ubuntu)',
                  date: 'Thu, 20 Feb 2025 12:57:34 GMT',
                  'content-type': 'text/html',
                  'content-length': '176',
                  connection: 'close'
                },
                [Symbol(kHeadersCount)]: 10,
                [Symbol(kTrailers)]: null,
                [Symbol(kTrailersCount)]: 0
              },
              aborted: false,
              timeoutCb: null,
              upgradeOrConnect: false,
              parser: null,
              maxHeadersCount: null,
              reusedSocket: false,
              host: 'adamantum',
              protocol: 'https:',
              _redirectable: Writable {
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: true,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: true,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: true,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                _events: [Object: null prototype] {
                  response: [Function: handleResponse],
                  error: [Function: handleRequestError],
                  socket: [Function: handleRequestSocket]
                },
                _eventsCount: 3,
                _maxListeners: undefined,
                _options: {
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: '/api/weather/payload',
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '697',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: '',
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload'
                },
                _ended: true,
                _ending: true,
                _redirectCount: 0,
                _redirects: [],
                _requestBodyLength: 697,
                _requestBodyBuffers: [],
                _onNativeResponse: [Function (anonymous)],
                _currentRequest: [Circular *3],
                _currentUrl: 'https://adamantum/api/weather/payload',
                [Symbol(kCapture)]: false
              },
              [Symbol(kCapture)]: false,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(kNeedDrain)]: false,
              [Symbol(corked)]: 0,
              [Symbol(kOutHeaders)]: [Object: null prototype] {
                accept: [ 'Accept', 'application/json, text/plain, */*' ],
                'content-type': [ 'Content-Type', 'application/json' ],
                'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                'content-length': [ 'Content-Length', '697' ],
                'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                host: [ 'Host', 'adamantum' ]
              },
              [Symbol(errored)]: null,
              [Symbol(kHighWaterMark)]: 16384,
              [Symbol(kRejectNonStandardBodyWrites)]: false,
              [Symbol(kUniqueHeaders)]: null
            },
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '697',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    method: 'put',
    url: 'https://adamantum/api/weather/payload',
    data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"}],"hash":"db23d7d9d99d5cad468705561d002169"}'
  },
  request: <ref *3> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '697',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: false,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'adamantum',
      alpnProtocol: false,
      authorized: false,
      authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'adamantum',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: false,
      parser: null,
      _httpMessage: [Circular *3],
      [Symbol(alpncallback)]: null,
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 126,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: false,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '697',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: 443,
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] },
          [Symbol(kCapture)]: false
        },
        host: 'adamantum',
        noDelay: true,
        servername: 'adamantum',
        _agentKey: 'adamantum:443::::::::false:::::::::::::',
        encoding: null,
        singleUse: true
      }
    },
    _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/1.7.9\r\n' +
      'Content-Length: 697\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: adamantum\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: [Circular *3],
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '697',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'PUT',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/api/weather/payload',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Server',
        'nginx/1.24.0 (Ubuntu)',
        'Date',
        'Thu, 20 Feb 2025 12:57:34 GMT',
        'Content-Type',
        'text/html',
        'Content-Length',
        '176',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 504,
      statusMessage: 'Gateway Time-out',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *3],
      responseUrl: 'https://adamantum/api/weather/payload',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        server: 'nginx/1.24.0 (Ubuntu)',
        date: 'Thu, 20 Feb 2025 12:57:34 GMT',
        'content-type': 'text/html',
        'content-length': '176',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 10,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'adamantum',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/api/weather/payload',
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '697',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: <ref *4> {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: [Circular *4],
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: '',
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: false,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'adamantum',
                alpnProtocol: false,
                authorized: false,
                authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'adamantum',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  state: 266328,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: false,
                parser: null,
                _httpMessage: [Circular *3],
                [Symbol(alpncallback)]: null,
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 126,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: false,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '697',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: <ref *4> { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: 443,
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload',
                  _defaultAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  host: 'adamantum',
                  noDelay: true,
                  servername: 'adamantum',
                  _agentKey: 'adamantum:443::::::::false:::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 697,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *3],
      _currentUrl: 'https://adamantum/api/weather/payload',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
      'content-length': [ 'Content-Length', '697' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'adamantum' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 504,
    statusText: 'Gateway Time-out',
    headers: Object [AxiosHeaders] {
      server: 'nginx/1.24.0 (Ubuntu)',
      date: 'Thu, 20 Feb 2025 12:57:34 GMT',
      'content-type': 'text/html',
      'content-length': '176',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.7.9',
        'Content-Length': '697',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      httpsAgent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: <ref *3> ClientRequest {
                _events: [Object: null prototype] {
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)],
                  finish: [Function: requestOnFinish]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '697',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *1],
                _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.7.9\r\n' +
                  'Content-Length: 697\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: adamantum\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *2],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                joinDuplicateHeaders: undefined,
                path: '/api/weather/payload',
                _ended: true,
                res: IncomingMessage {
                  _readableState: ReadableState {
                    state: 456758,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: responseOnEnd],
                      [Function: handleStreamEnd]
                    ],
                    error: [Function: handleStreamError],
                    data: [Function: handleStreamData],
                    aborted: [Function: handlerStreamAborted]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  socket: [Circular *1],
                  httpVersionMajor: 1,
                  httpVersionMinor: 1,
                  httpVersion: '1.1',
                  complete: true,
                  rawHeaders: [
                    'Server',
                    'nginx/1.24.0 (Ubuntu)',
                    'Date',
                    'Thu, 20 Feb 2025 12:57:34 GMT',
                    'Content-Type',
                    'text/html',
                    'Content-Length',
                    '176',
                    'Connection',
                    'close'
                  ],
                  rawTrailers: [],
                  joinDuplicateHeaders: undefined,
                  aborted: false,
                  upgrade: false,
                  url: '',
                  method: null,
                  statusCode: 504,
                  statusMessage: 'Gateway Time-out',
                  client: [Circular *1],
                  _consuming: false,
                  _dumped: false,
                  req: [Circular *3],
                  responseUrl: 'https://adamantum/api/weather/payload',
                  redirects: [],
                  [Symbol(kCapture)]: false,
                  [Symbol(kHeaders)]: {
                    server: 'nginx/1.24.0 (Ubuntu)',
                    date: 'Thu, 20 Feb 2025 12:57:34 GMT',
                    'content-type': 'text/html',
                    'content-length': '176',
                    connection: 'close'
                  },
                  [Symbol(kHeadersCount)]: 10,
                  [Symbol(kTrailers)]: null,
                  [Symbol(kTrailersCount)]: 0
                },
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: null,
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'adamantum',
                protocol: 'https:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: '/api/weather/payload',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: '',
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 697,
                  _requestBodyBuffers: [],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *3],
                  _currentUrl: 'https://adamantum/api/weather/payload',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                  'content-length': [ 'Content-Length', '697' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'adamantum' ]
                },
                [Symbol(errored)]: null,
                [Symbol(kHighWaterMark)]: 16384,
                [Symbol(kRejectNonStandardBodyWrites)]: false,
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '697',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      method: 'put',
      url: 'https://adamantum/api/weather/payload',
      data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"}],"hash":"db23d7d9d99d5cad468705561d002169"}'
    },
    request: <ref *3> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '697',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.7.9\r\n' +
        'Content-Length: 697\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: adamantum\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: [Circular *3],
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '697',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/weather/payload',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '697',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Server',
          'nginx/1.24.0 (Ubuntu)',
          'Date',
          'Thu, 20 Feb 2025 12:57:34 GMT',
          'Content-Type',
          'text/html',
          'Content-Length',
          '176',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 504,
        statusMessage: 'Gateway Time-out',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '697',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *3],
        responseUrl: 'https://adamantum/api/weather/payload',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          server: 'nginx/1.24.0 (Ubuntu)',
          date: 'Thu, 20 Feb 2025 12:57:34 GMT',
          'content-type': 'text/html',
          'content-length': '176',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 10,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'adamantum',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/api/weather/payload',
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: false,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'adamantum',
                    alpnProtocol: false,
                    authorized: false,
                    authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'adamantum',
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      state: 266328,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      errored: null,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: false,
                    parser: null,
                    _httpMessage: [Circular *3],
                    [Symbol(alpncallback)]: null,
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 126,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: false,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'https:',
                      path: null,
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.7.9',
                        'Content-Length': '697',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: [Circular *4],
                      auth: undefined,
                      family: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'adamantum',
                      port: 443,
                      agent: [Circular *2],
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] {
                              noDelay: true,
                              path: null
                            },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: { map: {}, list: [] },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/api/weather/payload',
                      _defaultAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      host: 'adamantum',
                      noDelay: true,
                      servername: 'adamantum',
                      _agentKey: 'adamantum:443::::::::false:::::::::::::',
                      encoding: null,
                      singleUse: true
                    }
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: '',
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 27 25 f1 c4 af af 99 b3 ce e9 bd ae f0 60 b2 7d c6 13 36 2b 37 10 72 44 c9 e4 52 57 94 34 83 3e 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 697,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *3],
        _currentUrl: 'https://adamantum/api/weather/payload',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
        'content-length': [ 'Content-Length', '697' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'adamantum' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<html>\r\n' +
      '<head><title>504 Gateway Time-out</title></head>\r\n' +
      '<body>\r\n' +
      '<center><h1>504 Gateway Time-out</h1></center>\r\n' +
      '<hr><center>nginx/1.24.0 (Ubuntu)</center>\r\n' +
      '</body>\r\n' +
      '</html>\r\n'
  },
  status: 504,
  level: 'error',
  timestamp: '2025-02-20T12:57:53.128Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:57:53.242Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:57:53.288Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:57:53.333Z'
}
{
  message: '{"temperature":24.579285714285646,"pressure":8437.57142857143,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T12:57:53.333Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:57:53.379Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:57:56.617Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T12:57:56.620Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T12:57:56.620Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T12:57:56.621Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:58:10.962Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:58:11.009Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:58:11.055Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T12:58:11.056Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:58:11.102Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:58:20.964Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:58:21.009Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:58:21.055Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T12:58:21.056Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:58:21.102Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:58:30.967Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:58:31.013Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:58:31.059Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T12:58:31.060Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:58:31.105Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:58:40.972Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:58:41.018Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:58:41.064Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T12:58:41.065Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:58:41.110Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:58:50.975Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:58:51.021Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:58:51.068Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T12:58:51.068Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:58:51.122Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:59:00.979Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:59:01.024Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:59:01.070Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T12:59:01.070Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:59:01.116Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T12:59:10.983Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T12:59:11.030Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T12:59:11.076Z'
}
{
  message: '{"temperature":24.579285714285646,"pressure":8437.57142857143,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T12:59:11.076Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T12:59:11.122Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:01:02.647Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T13:01:02.650Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:01:02.650Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T13:01:02.651Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:01:20.990Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:01:21.037Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:01:21.083Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:01:21.084Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:01:21.130Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:01:30.993Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:01:31.038Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:01:31.084Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T13:01:31.085Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:01:31.132Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.9',
      'Content-Length': '697',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    httpsAgent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: <ref *3> ClientRequest {
              _events: [Object: null prototype] {
                abort: [Function (anonymous)],
                aborted: [Function (anonymous)],
                connect: [Function (anonymous)],
                error: [Function (anonymous)],
                socket: [Function (anonymous)],
                timeout: [Function (anonymous)],
                finish: [Function: requestOnFinish]
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              outputData: [],
              outputSize: 0,
              writable: true,
              destroyed: false,
              _last: true,
              chunkedEncoding: false,
              shouldKeepAlive: false,
              maxRequestsOnConnectionReached: false,
              _defaultKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: false,
              _removedConnection: false,
              _removedContLen: false,
              _removedTE: false,
              strictContentLength: false,
              _contentLength: '697',
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              _closed: false,
              socket: [Circular *1],
              _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.7.9\r\n' +
                'Content-Length: 697\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: adamantum\r\n' +
                'Connection: close\r\n' +
                '\r\n',
              _keepAliveTimeout: 0,
              _onPendingData: [Function: nop],
              agent: [Circular *2],
              socketPath: undefined,
              method: 'PUT',
              maxHeaderSize: undefined,
              insecureHTTPParser: undefined,
              joinDuplicateHeaders: undefined,
              path: '/api/weather/payload',
              _ended: true,
              res: IncomingMessage {
                _readableState: ReadableState {
                  state: 456758,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: responseOnEnd],
                    [Function: handleStreamEnd]
                  ],
                  error: [Function: handleStreamError],
                  data: [Function: handleStreamData],
                  aborted: [Function: handlerStreamAborted]
                },
                _eventsCount: 4,
                _maxListeners: undefined,
                socket: [Circular *1],
                httpVersionMajor: 1,
                httpVersionMinor: 1,
                httpVersion: '1.1',
                complete: true,
                rawHeaders: [
                  'Server',
                  'nginx/1.24.0 (Ubuntu)',
                  'Date',
                  'Thu, 20 Feb 2025 13:01:40 GMT',
                  'Content-Type',
                  'text/html; charset=utf-8',
                  'Content-Length',
                  '1210',
                  'Connection',
                  'close',
                  'X-Powered-By',
                  'Express',
                  'Content-Security-Policy',
                  "default-src 'none'",
                  'X-Content-Type-Options',
                  'nosniff'
                ],
                rawTrailers: [],
                joinDuplicateHeaders: undefined,
                aborted: false,
                upgrade: false,
                url: '',
                method: null,
                statusCode: 400,
                statusMessage: 'Bad Request',
                client: [Circular *1],
                _consuming: false,
                _dumped: false,
                req: [Circular *3],
                responseUrl: 'https://adamantum/api/weather/payload',
                redirects: [],
                [Symbol(kCapture)]: false,
                [Symbol(kHeaders)]: {
                  server: 'nginx/1.24.0 (Ubuntu)',
                  date: 'Thu, 20 Feb 2025 13:01:40 GMT',
                  'content-type': 'text/html; charset=utf-8',
                  'content-length': '1210',
                  connection: 'close',
                  'x-powered-by': 'Express',
                  'content-security-policy': "default-src 'none'",
                  'x-content-type-options': 'nosniff'
                },
                [Symbol(kHeadersCount)]: 16,
                [Symbol(kTrailers)]: null,
                [Symbol(kTrailersCount)]: 0
              },
              aborted: false,
              timeoutCb: null,
              upgradeOrConnect: false,
              parser: null,
              maxHeadersCount: null,
              reusedSocket: false,
              host: 'adamantum',
              protocol: 'https:',
              _redirectable: Writable {
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: true,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: true,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: true,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                _events: [Object: null prototype] {
                  response: [Function: handleResponse],
                  error: [Function: handleRequestError],
                  socket: [Function: handleRequestSocket]
                },
                _eventsCount: 3,
                _maxListeners: undefined,
                _options: {
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: '/api/weather/payload',
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '697',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: '',
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload'
                },
                _ended: true,
                _ending: true,
                _redirectCount: 0,
                _redirects: [],
                _requestBodyLength: 697,
                _requestBodyBuffers: [],
                _onNativeResponse: [Function (anonymous)],
                _currentRequest: [Circular *3],
                _currentUrl: 'https://adamantum/api/weather/payload',
                [Symbol(kCapture)]: false
              },
              [Symbol(kCapture)]: false,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(kNeedDrain)]: false,
              [Symbol(corked)]: 0,
              [Symbol(kOutHeaders)]: [Object: null prototype] {
                accept: [ 'Accept', 'application/json, text/plain, */*' ],
                'content-type': [ 'Content-Type', 'application/json' ],
                'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                'content-length': [ 'Content-Length', '697' ],
                'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                host: [ 'Host', 'adamantum' ]
              },
              [Symbol(errored)]: null,
              [Symbol(kHighWaterMark)]: 16384,
              [Symbol(kRejectNonStandardBodyWrites)]: false,
              [Symbol(kUniqueHeaders)]: null
            },
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '697',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    method: 'put',
    url: 'https://adamantum/api/weather/payload',
    data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"}],"hash":"db23d7d9d99d5cad468705561d002169"}'
  },
  request: <ref *3> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '697',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: false,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'adamantum',
      alpnProtocol: false,
      authorized: false,
      authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'adamantum',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: false,
      parser: null,
      _httpMessage: [Circular *3],
      [Symbol(alpncallback)]: null,
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 126,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: false,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '697',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: 443,
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] },
          [Symbol(kCapture)]: false
        },
        host: 'adamantum',
        noDelay: true,
        servername: 'adamantum',
        _agentKey: 'adamantum:443::::::::false:::::::::::::',
        encoding: null,
        singleUse: true
      }
    },
    _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/1.7.9\r\n' +
      'Content-Length: 697\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: adamantum\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: [Circular *3],
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '697',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'PUT',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/api/weather/payload',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Server',
        'nginx/1.24.0 (Ubuntu)',
        'Date',
        'Thu, 20 Feb 2025 13:01:40 GMT',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '1210',
        'Connection',
        'close',
        'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *3],
      responseUrl: 'https://adamantum/api/weather/payload',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        server: 'nginx/1.24.0 (Ubuntu)',
        date: 'Thu, 20 Feb 2025 13:01:40 GMT',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '1210',
        connection: 'close',
        'x-powered-by': 'Express',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'adamantum',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/api/weather/payload',
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '697',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: <ref *4> {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: [Circular *4],
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: '',
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: false,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'adamantum',
                alpnProtocol: false,
                authorized: false,
                authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'adamantum',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  state: 266328,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: false,
                parser: null,
                _httpMessage: [Circular *3],
                [Symbol(alpncallback)]: null,
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 126,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: false,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '697',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: <ref *4> { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: 443,
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload',
                  _defaultAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  host: 'adamantum',
                  noDelay: true,
                  servername: 'adamantum',
                  _agentKey: 'adamantum:443::::::::false:::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 697,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *3],
      _currentUrl: 'https://adamantum/api/weather/payload',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
      'content-length': [ 'Content-Length', '697' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'adamantum' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      server: 'nginx/1.24.0 (Ubuntu)',
      date: 'Thu, 20 Feb 2025 13:01:40 GMT',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '1210',
      connection: 'close',
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.7.9',
        'Content-Length': '697',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      httpsAgent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: <ref *3> ClientRequest {
                _events: [Object: null prototype] {
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)],
                  finish: [Function: requestOnFinish]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '697',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *1],
                _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.7.9\r\n' +
                  'Content-Length: 697\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: adamantum\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *2],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                joinDuplicateHeaders: undefined,
                path: '/api/weather/payload',
                _ended: true,
                res: IncomingMessage {
                  _readableState: ReadableState {
                    state: 456758,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: responseOnEnd],
                      [Function: handleStreamEnd]
                    ],
                    error: [Function: handleStreamError],
                    data: [Function: handleStreamData],
                    aborted: [Function: handlerStreamAborted]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  socket: [Circular *1],
                  httpVersionMajor: 1,
                  httpVersionMinor: 1,
                  httpVersion: '1.1',
                  complete: true,
                  rawHeaders: [
                    'Server',
                    'nginx/1.24.0 (Ubuntu)',
                    'Date',
                    'Thu, 20 Feb 2025 13:01:40 GMT',
                    'Content-Type',
                    'text/html; charset=utf-8',
                    'Content-Length',
                    '1210',
                    'Connection',
                    'close',
                    'X-Powered-By',
                    'Express',
                    'Content-Security-Policy',
                    "default-src 'none'",
                    'X-Content-Type-Options',
                    'nosniff'
                  ],
                  rawTrailers: [],
                  joinDuplicateHeaders: undefined,
                  aborted: false,
                  upgrade: false,
                  url: '',
                  method: null,
                  statusCode: 400,
                  statusMessage: 'Bad Request',
                  client: [Circular *1],
                  _consuming: false,
                  _dumped: false,
                  req: [Circular *3],
                  responseUrl: 'https://adamantum/api/weather/payload',
                  redirects: [],
                  [Symbol(kCapture)]: false,
                  [Symbol(kHeaders)]: {
                    server: 'nginx/1.24.0 (Ubuntu)',
                    date: 'Thu, 20 Feb 2025 13:01:40 GMT',
                    'content-type': 'text/html; charset=utf-8',
                    'content-length': '1210',
                    connection: 'close',
                    'x-powered-by': 'Express',
                    'content-security-policy': "default-src 'none'",
                    'x-content-type-options': 'nosniff'
                  },
                  [Symbol(kHeadersCount)]: 16,
                  [Symbol(kTrailers)]: null,
                  [Symbol(kTrailersCount)]: 0
                },
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: null,
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'adamantum',
                protocol: 'https:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: '/api/weather/payload',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: '',
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 697,
                  _requestBodyBuffers: [],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *3],
                  _currentUrl: 'https://adamantum/api/weather/payload',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                  'content-length': [ 'Content-Length', '697' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'adamantum' ]
                },
                [Symbol(errored)]: null,
                [Symbol(kHighWaterMark)]: 16384,
                [Symbol(kRejectNonStandardBodyWrites)]: false,
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '697',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      method: 'put',
      url: 'https://adamantum/api/weather/payload',
      data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"}],"hash":"db23d7d9d99d5cad468705561d002169"}'
    },
    request: <ref *3> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '697',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.7.9\r\n' +
        'Content-Length: 697\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: adamantum\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: [Circular *3],
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '697',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/weather/payload',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '697',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Server',
          'nginx/1.24.0 (Ubuntu)',
          'Date',
          'Thu, 20 Feb 2025 13:01:40 GMT',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '1210',
          'Connection',
          'close',
          'X-Powered-By',
          'Express',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '697',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *3],
        responseUrl: 'https://adamantum/api/weather/payload',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          server: 'nginx/1.24.0 (Ubuntu)',
          date: 'Thu, 20 Feb 2025 13:01:40 GMT',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '1210',
          connection: 'close',
          'x-powered-by': 'Express',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'adamantum',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/api/weather/payload',
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '697',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: false,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'adamantum',
                    alpnProtocol: false,
                    authorized: false,
                    authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'adamantum',
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      state: 266328,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      errored: null,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: false,
                    parser: null,
                    _httpMessage: [Circular *3],
                    [Symbol(alpncallback)]: null,
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 126,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: false,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'https:',
                      path: null,
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.7.9',
                        'Content-Length': '697',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: [Circular *4],
                      auth: undefined,
                      family: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'adamantum',
                      port: 443,
                      agent: [Circular *2],
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] {
                              noDelay: true,
                              path: null
                            },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: { map: {}, list: [] },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/api/weather/payload',
                      _defaultAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      host: 'adamantum',
                      noDelay: true,
                      servername: 'adamantum',
                      _agentKey: 'adamantum:443::::::::false:::::::::::::',
                      encoding: null,
                      singleUse: true
                    }
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: '',
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '697',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 5f 5f 5e b6 1d 72 78 92 e5 91 e2 09 e6 ea 7f a6 fb 6b 37 dc c3 93 e4 32 1f 9b d4 01 21 c1 09 91 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 697,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *3],
        _currentUrl: 'https://adamantum/api/weather/payload',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
        'content-length': [ 'Content-Length', '697' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'adamantum' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>ValidateError<br> &nbsp; &nbsp;at getValidatedArgs (/home/kim/src/weather-hub/dist/routes/routes.js:436:19)<br> &nbsp; &nbsp;at PayloadController_SavePayload (/home/kim/src/weather-hub/dist/routes/routes.js:152:29)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (/home/kim/src/weather-hub/node_modules/express/lib/router/layer.js:95:5)<br> &nbsp; &nbsp;at next (/home/kim/src/weather-hub/node_modules/express/lib/router/route.js:149:13)<br> &nbsp; &nbsp;at Route.dispatch (/home/kim/src/weather-hub/node_modules/express/lib/router/route.js:119:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (/home/kim/src/weather-hub/node_modules/express/lib/router/layer.js:95:5)<br> &nbsp; &nbsp;at /home/kim/src/weather-hub/node_modules/express/lib/router/index.js:284:15<br> &nbsp; &nbsp;at Function.process_params (/home/kim/src/weather-hub/node_modules/express/lib/router/index.js:346:12)<br> &nbsp; &nbsp;at next (/home/kim/src/weather-hub/node_modules/express/lib/router/index.js:280:10)<br> &nbsp; &nbsp;at /home/kim/src/weather-hub/node_modules/body-parser/lib/read.js:137:5</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 400,
  level: 'error',
  timestamp: '2025-02-20T13:01:41.176Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:01:41.272Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:01:41.317Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:01:41.362Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T13:01:41.363Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:01:41.409Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:01:51.277Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:01:51.324Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:01:51.370Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T13:01:51.371Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:01:51.416Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:01.282Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:01.327Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:01.373Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:01.373Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:01.419Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:11.392Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:11.437Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:11.483Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:11.483Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:11.642Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:21.289Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:21.335Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:21.381Z'
}
{
  message: '{"temperature":24.579285714285646,"pressure":8437.57142857143,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:21.381Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:21.427Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:31.293Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:31.339Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:31.384Z'
}
{
  message: '{"temperature":19.661999999999967,"pressure":6749.933333333333,"humidity":1.8}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:31.384Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:31.430Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:41.301Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:41.346Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:41.393Z'
}
{
  message: '{"temperature":16.08727272727269,"pressure":5522.703030303031,"humidity":1.4727272727272727}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:41.393Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:41.438Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:02:51.305Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:02:51.351Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:02:51.396Z'
}
{
  message: '{"temperature":13.407090909090874,"pressure":4602.181818181818,"humidity":1.2272727272727273}',
  level: 'debug',
  timestamp: '2025-02-20T13:02:51.397Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:02:51.442Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:01.311Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:01.356Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:01.402Z'
}
{
  message: '{"temperature":11.344405594405561,"pressure":3894.181818181818,"humidity":1.0384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:01.402Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:01.448Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:11.315Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:11.361Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:11.407Z'
}
{
  message: '{"temperature":9.723736263736233,"pressure":3337.8901098901097,"humidity":0.8901098901098901}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:11.407Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:11.452Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:21.320Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:21.366Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:21.411Z'
}
{
  message: '{"temperature":8.427208791208765,"pressure":2892.852747252747,"humidity":0.7714285714285715}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:21.411Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:21.457Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:31.328Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:31.374Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:31.420Z'
}
{
  message: '{"temperature":7.373785714285706,"pressure":2531.2571428571428,"humidity":0.675}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:31.420Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:31.466Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:41.334Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:41.380Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:41.425Z'
}
{
  message: '{"temperature":6.506264705882345,"pressure":2233.470588235294,"humidity":0.5955882352941176}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:41.425Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:41.471Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:03:51.339Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:03:51.385Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:03:51.430Z'
}
{
  message: '{"temperature":5.782941176470586,"pressure":1985.2745098039215,"humidity":0.5294117647058824}',
  level: 'debug',
  timestamp: '2025-02-20T13:03:51.430Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:03:51.476Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:01.353Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:01.398Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:01.444Z'
}
{
  message: '{"temperature":5.174241486068118,"pressure":1776.3075335397316,"humidity":0.47368421052631576}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:01.444Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:01.490Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:11.350Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:11.395Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:11.440Z'
}
{
  message: '{"temperature":4.6571578947368435,"pressure":1598.6526315789474,"humidity":0.4263157894736842}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:11.441Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:11.486Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:21.356Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:21.402Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:21.448Z'
}
{
  message: '{"temperature":4.213609022556391,"pressure":1446.409022556391,"humidity":0.38571428571428573}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:21.448Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:21.494Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:31.363Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:31.409Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:31.454Z'
}
{
  message: '{"temperature":3.83054545454545,"pressure":1314.9246753246753,"humidity":0.35064935064935066}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:31.454Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:31.500Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:41.368Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:41.415Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:41.463Z'
}
{
  message: '{"temperature":3.497447769621684,"pressure":1200.5894974590626,"humidity":0.3201581027667984}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:41.463Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:41.509Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:04:51.371Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:04:51.417Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:04:51.462Z'
}
{
  message: '{"temperature":3.205988142292483,"pressure":1100.5454545454545,"humidity":0.29347826086956524}',
  level: 'debug',
  timestamp: '2025-02-20T13:04:51.463Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:04:51.508Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:05:00.058Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:01.372Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:01.418Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:01.463Z'
}
{
  message: '{"temperature":2.9493043478260716,"pressure":1012.4860869565217,"humidity":0.27}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:01.463Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:01.509Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:11.378Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:11.423Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:11.468Z'
}
{
  message: '{"temperature":2.7224461538461537,"pressure":934.6076923076923,"humidity":0.24923076923076923}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:11.469Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:11.514Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:21.382Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:21.429Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:21.474Z'
}
{
  message: '{"temperature":2.5209641025640943,"pressure":865.3647863247863,"humidity":0.23076923076923078}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:21.474Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:21.520Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:31.387Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:31.433Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:31.478Z'
}
{
  message: '{"temperature":2.340891330891326,"pressure":803.5579975579975,"humidity":0.21428571428571427}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:31.478Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:31.525Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:41.394Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:41.440Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:41.485Z'
}
{
  message: '{"temperature":2.1794471811713154,"pressure":748.144499178982,"humidity":0.19950738916256158}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:41.486Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:41.532Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:05:51.400Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:05:51.445Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:05:51.490Z'
}
{
  message: '{"temperature":2.034147783251236,"pressure":698.271921182266,"humidity":0.18620689655172415}',
  level: 'debug',
  timestamp: '2025-02-20T13:05:51.491Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:05:51.536Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:01.405Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:01.451Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:01.496Z'
}
{
  message: '{"temperature":1.9029098998887681,"pressure":653.225361512792,"humidity":0.17419354838709677}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:01.497Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:01.542Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:11.406Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:11.452Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:11.498Z'
}
{
  message: '{"temperature":1.7839758064516318,"pressure":612.4016129032258,"humidity":0.16330645161290322}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:11.498Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:11.543Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:21.411Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:21.457Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:21.502Z'
}
{
  message: '{"temperature":1.6757404692082158,"pressure":575.2774926686217,"humidity":0.1534090909090909}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:21.503Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:21.548Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:31.417Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:31.463Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:31.508Z'
}
{
  message: '{"temperature":1.5771724598930594,"pressure":541.4405080213904,"humidity":0.1443850267379679}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:31.509Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:31.554Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:41.422Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:41.467Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:41.512Z'
}
{
  message: '{"temperature":1.4871535523300283,"pressure":510.4935064935065,"humidity":0.1361344537815126}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:41.512Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:41.557Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:06:51.427Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:06:51.472Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:06:51.518Z'
}
{
  message: '{"temperature":1.404532212885175,"pressure":482.1355742296919,"humidity":0.12857142857142856}',
  level: 'debug',
  timestamp: '2025-02-20T13:06:51.519Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:06:51.565Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:01.433Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:01.478Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:01.524Z'
}
{
  message: '{"temperature":1.3286100386100612,"pressure":456.0767052767053,"humidity":0.12162162162162163}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:01.525Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:01.570Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:11.437Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:11.482Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:11.528Z'
}
{
  message: '{"temperature":1.2586818397344979,"pressure":432.07491702228543,"humidity":0.11522048364153627}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:11.529Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:11.575Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:21.541Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:21.586Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:21.747Z'
}
{
  message: '{"temperature":1.1941328372907531,"pressure":409.91924718240506,"humidity":0.10931174089068826}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:21.748Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:21.793Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:31.447Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:31.492Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:31.537Z'
}
{
  message: '{"temperature":1.1344251012145983,"pressure":389.4251012145749,"humidity":0.10384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:31.538Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:31.583Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:41.452Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:41.497Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:41.543Z'
}
{
  message: '{"temperature":1.0790131332082795,"pressure":370.4230769230769,"humidity":0.09878048780487805}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:41.543Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:41.588Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:07:51.460Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:07:51.505Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:07:51.551Z'
}
{
  message: '{"temperature":1.0276341463414869,"pressure":352.7857142857143,"humidity":0.09407665505226481}',
  level: 'debug',
  timestamp: '2025-02-20T13:07:51.551Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:07:51.597Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:01.464Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:01.509Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:01.554Z'
}
{
  message: '{"temperature":0.9799060043756797,"pressure":336.3720930232558,"humidity":0.08970099667774087}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:01.554Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:01.599Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:11.471Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:11.517Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:11.563Z'
}
{
  message: '{"temperature":0.9353639383872159,"pressure":321.08426457263664,"humidity":0.08562367864693446}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:11.563Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:11.609Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:21.475Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:21.521Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:21.567Z'
}
{
  message: '{"temperature":0.8937914023960738,"pressure":306.815503875969,"humidity":0.08181818181818182}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:21.567Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:21.613Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:31.481Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:31.526Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:31.571Z'
}
{
  message: '{"temperature":0.8549301712780203,"pressure":293.4772068511199,"humidity":0.0782608695652174}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:31.571Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:31.616Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:41.486Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:41.532Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:41.577Z'
}
{
  message: '{"temperature":0.8185494912118645,"pressure":280.9901942645698,"humidity":0.07493061979648474}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:41.577Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:41.622Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:08:51.492Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:08:51.537Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:08:51.582Z'
}
{
  message: '{"temperature":0.7844426456984501,"pressure":269.28353376503236,"humidity":0.07180851063829788}',
  level: 'debug',
  timestamp: '2025-02-20T13:08:51.583Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:08:51.628Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:01.497Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:01.542Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:01.587Z'
}
{
  message: '{"temperature":0.752372991749911,"pressure":258.28842813721235,"humidity":0.06887755102040816}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:01.587Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:01.634Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:11.502Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:11.547Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:11.592Z'
}
{
  message: '{"temperature":0.7222795918367583,"pressure":247.95816326530613,"humidity":0.06612244897959184}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:11.593Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:11.637Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:21.508Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:21.553Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:21.598Z'
}
{
  message: '{"temperature":0.6940033613445664,"pressure":238.23078031212486,"humidity":0.06352941176470588}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:21.599Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:21.644Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:31.513Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:31.558Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:31.603Z'
}
{
  message: '{"temperature":0.6673104072398409,"pressure":229.06932126696833,"humidity":0.06108597285067873}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:31.604Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:31.649Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:41.518Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:41.564Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:41.610Z'
}
{
  message: '{"temperature":0.642128404337092,"pressure":220.42636386920515,"humidity":0.05878084179970972}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:41.610Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:41.656Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:09:51.525Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:09:51.570Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:09:51.616Z'
}
{
  message: '{"temperature":0.6183454281567832,"pressure":212.26350588614739,"humidity":0.05660377358490566}',
  level: 'debug',
  timestamp: '2025-02-20T13:09:51.616Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:09:51.661Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:10:00.055Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:01.527Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:01.572Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:01.618Z'
}
{
  message: '{"temperature":0.5958597293691972,"pressure":204.54583571564703,"humidity":0.05454545454545454}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:01.618Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:01.663Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:11.533Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:11.578Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:11.623Z'
}
{
  message: '{"temperature":0.5745396825397138,"pressure":197.23766233766233,"humidity":0.052597402597402594}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:11.623Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:11.669Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:21.539Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:21.585Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:21.630Z'
}
{
  message: '{"temperature":0.5543814080656477,"pressure":190.31804511278196,"humidity":0.05075187969924812}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:21.630Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:21.676Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:31.636Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:31.682Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:31.728Z'
}
{
  message: '{"temperature":0.5353020482240385,"pressure":183.75265750583355,"humidity":0.04900181488203267}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:31.729Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:31.774Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:41.545Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:41.590Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:41.636Z'
}
{
  message: '{"temperature":0.5171558645298531,"pressure":177.52474699314035,"humidity":0.04734073641145529}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:41.636Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:41.682Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:10:51.553Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:10:51.598Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:10:51.645Z'
}
{
  message: '{"temperature":0.4999170075979243,"pressure":171.6081823495032,"humidity":0.04576271186440678}',
  level: 'debug',
  timestamp: '2025-02-20T13:10:51.646Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:10:51.691Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:01.558Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:01.603Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:01.648Z'
}
{
  message: '{"temperature":0.483525979438764,"pressure":165.98255070853014,"humidity":0.04426229508196721}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:01.648Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:01.693Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:11.563Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:11.609Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:11.654Z'
}
{
  message: '{"temperature":0.4679280803807822,"pressure":160.6290851401375,"humidity":0.04283447911158118}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:11.655Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:11.700Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:21.568Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:21.613Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:21.659Z'
}
{
  message: '{"temperature":0.45307295207880155,"pressure":155.53050791971998,"humidity":0.041474654377880185}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:21.659Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:21.704Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:31.644Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:31.689Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:31.734Z'
}
{
  message: '{"temperature":0.43888440860218597,"pressure":150.66791474654377,"humidity":0.04017857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:31.735Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:31.780Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:41.580Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:41.626Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:41.671Z'
}
{
  message: '{"temperature":0.42538095238098733,"pressure":146.0327380952381,"humidity":0.03894230769230769}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:41.672Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:41.718Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:11:51.585Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:11:51.631Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:11:51.677Z'
}
{
  message: '{"temperature":0.41251923076926184,"pressure":141.60541958041958,"humidity":0.03776223776223776}',
  level: 'debug',
  timestamp: '2025-02-20T13:11:51.677Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:11:51.723Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:01.591Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:01.636Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:01.681Z'
}
{
  message: '{"temperature":0.40020498904084445,"pressure":137.3791462269074,"humidity":0.036635006784260515}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:01.681Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:01.726Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:11.595Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:11.640Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:11.685Z'
}
{
  message: '{"temperature":0.38843403304337104,"pressure":133.33929284060977,"humidity":0.03555750658472344}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:11.686Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:11.731Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:21.601Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:21.647Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:21.693Z'
}
{
  message: '{"temperature":0.3771748673512552,"pressure":129.47505439554146,"humidity":0.034526854219948847}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:21.694Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:21.739Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:31.655Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:31.700Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:31.860Z'
}
{
  message: '{"temperature":0.3663982462550583,"pressure":125.77639751552795,"humidity":0.03354037267080745}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:31.860Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:31.905Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:41.613Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:41.659Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:41.705Z'
}
{
  message: '{"temperature":0.35607698364101203,"pressure":122.23399527600385,"humidity":0.032595573440643864}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:41.705Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:41.750Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:12:51.619Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:12:51.664Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:12:51.709Z'
}
{
  message: '{"temperature":0.34616230717642943,"pressure":118.83682092555333,"humidity":0.03169014084507042}',
  level: 'debug',
  timestamp: '2025-02-20T13:12:51.709Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:12:51.755Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:01.625Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:01.670Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:01.716Z'
}
{
  message: '{"temperature":0.3366788861020346,"pressure":115.58161296546402,"humidity":0.030821917808219176}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:01.716Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:01.762Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:11.631Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:11.677Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:11.722Z'
}
{
  message: '{"temperature":0.32760212267065497,"pressure":112.45612736023695,"humidity":0.029988893002591634}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:11.722Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:11.767Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:21.636Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:21.681Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:21.727Z'
}
{
  message: '{"temperature":0.3188659015179947,"pressure":109.4578896704924,"humidity":0.02918918918918919}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:21.727Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:21.773Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:31.642Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:31.688Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:31.733Z'
}
{
  message: '{"temperature":0.31047453769562705,"pressure":106.5779800853485,"humidity":0.028421052631578948}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:31.733Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:31.779Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:41.647Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:41.693Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:41.738Z'
}
{
  message: '{"temperature":0.3024101161996269,"pressure":103.81025290498975,"humidity":0.027682843472317156}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:41.739Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:41.784Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:13:51.651Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:13:51.697Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:13:51.742Z'
}
{
  message: '{"temperature":0.29465587044538044,"pressure":101.14895630685105,"humidity":0.026973026973026972}',
  level: 'debug',
  timestamp: '2025-02-20T13:13:51.742Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:13:51.788Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:01.657Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:01.702Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:01.748Z'
}
{
  message: '{"temperature":0.2871960950442336,"pressure":98.5887024368037,"humidity":0.02629016553067186}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:01.748Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:01.794Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:11.663Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:11.708Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:11.754Z'
}
{
  message: '{"temperature":0.2799970788705302,"pressure":96.12254138266796,"humidity":0.025632911392405065}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:11.754Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:11.800Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:21.668Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:21.714Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:21.759Z'
}
{
  message: '{"temperature":0.2730839193624344,"pressure":93.74962494139709,"humidity":0.025}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:21.759Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:21.804Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:31.672Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:31.717Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:31.762Z'
}
{
  message: '{"temperature":0.26644173441738006,"pressure":91.4616982836495,"humidity":0.024390243902439025}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:31.763Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:31.808Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:41.678Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:41.723Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:41.769Z'
}
{
  message: '{"temperature":0.26002133194026467,"pressure":89.2582797313917,"humidity":0.023802527181898327}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:41.769Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:41.814Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:14:51.685Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:14:51.731Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:14:51.777Z'
}
{
  message: '{"temperature":0.25383023382733383,"pressure":87.13353763485999,"humidity":0.02323580034423408}',
  level: 'debug',
  timestamp: '2025-02-20T13:14:51.777Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:14:51.822Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:15:00.054Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:01.686Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:01.732Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:01.779Z'
}
{
  message: '{"temperature":0.2478576490837651,"pressure":85.08377037562013,"humidity":0.0226890756302521}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:01.779Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:01.824Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:11.692Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:11.737Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:11.782Z'
}
{
  message: '{"temperature":0.24209341410986493,"pressure":83.10549149892515,"humidity":0.02216142270861833}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:11.783Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:11.828Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:21.698Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:21.743Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:21.788Z'
}
{
  message: '{"temperature":0.2365119109392274,"pressure":81.19381102882211,"humidity":0.02165196471531676}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:21.789Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:21.834Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:31.704Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:31.749Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:31.794Z'
}
{
  message: '{"temperature":0.2311369104031826,"pressure":79.34891011154042,"humidity":0.02115987460815047}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:31.794Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:31.839Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:41.708Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:41.755Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:41.801Z'
}
{
  message: '{"temperature":0.22595840231062467,"pressure":77.56465076961008,"humidity":0.020684371807967315}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:41.801Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:41.847Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:15:51.715Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:15:51.761Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:15:51.806Z'
}
{
  message: '{"temperature":0.22093701055502046,"pressure":75.84140279196458,"humidity":0.020224719101123594}',
  level: 'debug',
  timestamp: '2025-02-20T13:15:51.807Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:15:51.851Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:01.722Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:01.767Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:01.812Z'
}
{
  message: '{"temperature":0.21608116228344326,"pressure":74.17495164012018,"humidity":0.01978021978021978}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:01.813Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:01.859Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:11.726Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:11.772Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:11.817Z'
}
{
  message: '{"temperature":0.21138365981847185,"pressure":72.56282847587195,"humidity":0.019350215002388916}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:11.817Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:11.862Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:21.733Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:21.779Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:21.824Z'
}
{
  message: '{"temperature":0.20683769246184833,"pressure":71.00269716258497,"humidity":0.018934081346423562}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:21.825Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:21.870Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:31.739Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:31.784Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:31.830Z'
}
{
  message: '{"temperature":0.20243681179317496,"pressure":69.49234579690251,"humidity":0.018531228551818806}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:31.830Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:31.875Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:41.745Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:41.790Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:41.835Z'
}
{
  message: '{"temperature":0.19816147093887504,"pressure":68.02833507929054,"humidity":0.018141097424412094}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:41.836Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:41.880Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:16:51.751Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:16:51.797Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:16:51.842Z'
}
{
  message: '{"temperature":0.19403331466968315,"pressure":66.61142217245241,"humidity":0.017763157894736842}',
  level: 'debug',
  timestamp: '2025-02-20T13:16:51.842Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:16:51.887Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:01.756Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:01.801Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:01.846Z'
}
{
  message: '{"temperature":0.19004571351061325,"pressure":65.23703201302224,"humidity":0.017396907216494846}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:01.847Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:01.892Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:11.762Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:11.806Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:11.851Z'
}
{
  message: '{"temperature":0.18616715758471544,"pressure":63.906006732589944,"humidity":0.017041868293709236}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:11.852Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:11.897Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:21.767Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:21.812Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:21.857Z'
}
{
  message: '{"temperature":0.18240613583768395,"pressure":62.61530516611518,"humidity":0.016697588126159554}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:21.858Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:21.903Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:31.771Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:31.816Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:31.862Z'
}
{
  message: '{"temperature":0.17875794681512527,"pressure":61.363314780457635,"humidity":0.016363636363636365}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:31.862Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:31.907Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:41.776Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:41.923Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:41.968Z'
}
{
  message: '{"temperature":0.1752181218122134,"pressure":60.14850285028503,"humidity":0.01603960396039604}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:41.969Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:42.013Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:17:51.782Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:17:51.827Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:17:51.872Z'
}
{
  message: '{"temperature":-0.0000058805880194628806,"pressure":0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:17:51.872Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:17:51.918Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:01.787Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:01.833Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:01.878Z'
}
{
  message: '{"temperature":-0.000018001800147828274,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:01.878Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:01.924Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:11.793Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:11.838Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:11.883Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:11.884Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:11.929Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:21.800Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:21.845Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:21.890Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.0011761176117611762,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:21.891Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:21.936Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:31.806Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:31.852Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:31.898Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.000552055205520552,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:31.898Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:31.944Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:41.811Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:41.856Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:41.901Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.00007200720072007201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:41.902Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:41.948Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:18:51.815Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:18:51.861Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:18:51.906Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":0.0006960696069606961,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:18:51.906Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:18:51.951Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:01.821Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:01.867Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:01.912Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":0.0013201320132013201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:01.913Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:01.958Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:11.827Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:11.872Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:11.918Z'
}
{
  message: '{"temperature":-0.000005880588026616153,"pressure":0.0007320732073207321,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:11.918Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:11.963Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:21.833Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:21.878Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:21.924Z'
}
{
  message: '{"temperature":-0.00001800180015140491,"pressure":0.00014401440144014402,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:21.924Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:21.970Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:31.839Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:31.886Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:31.932Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:31.932Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:31.977Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:41.844Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:41.890Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:41.935Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.001032103210321032,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:41.935Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:41.981Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:19:51.850Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:19:51.895Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:19:51.940Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.000408040804080408,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:19:51.940Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:19:51.985Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:20:00.055Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:01.850Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:01.897Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:01.943Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.00021602160216021603,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:01.943Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:01.989Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:11.853Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:11.898Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:11.943Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.0008400840084008401,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:11.944Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:11.989Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:21.857Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:21.902Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:21.947Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":0.0014641464146414641,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:21.948Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:21.993Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:31.863Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:31.910Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:31.955Z'
}
{
  message: '{"temperature":-0.0000177617761418514,"pressure":-0.000312031203120312,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:31.956Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:32.001Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:41.869Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:41.915Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:41.960Z'
}
{
  message: '{"temperature":-0.00001776177614900467,"pressure":0.000312031203120312,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:41.960Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:42.006Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:20:51.874Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:20:51.939Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:20:51.984Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.0014641464146414641,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:20:51.984Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:20:52.030Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:01.880Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:01.925Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:01.970Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":-0.0008400840084008401,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:01.970Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:02.015Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:11.885Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:11.930Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:11.975Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.00021602160216021603,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:11.976Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:12.020Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:21.890Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:21.935Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:21.980Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.000408040804080408,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:21.981Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:22.026Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:31.896Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:31.942Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:31.987Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":0.001032103210321032,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:31.988Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:32.033Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:41.901Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:41.947Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:41.992Z'
}
{
  message: '{"temperature":-0.000005880588026616153,"pressure":0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:41.992Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:42.037Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:21:51.998Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:21:52.043Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:21:52.089Z'
}
{
  message: '{"temperature":-0.000018001800147828274,"pressure":-0.00014401440144014402,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:21:52.089Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:21:52.134Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:01.910Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:01.955Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:02.001Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.0007320732073207321,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:02.002Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:02.047Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:11.914Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:11.959Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:12.004Z'
}
{
  message: '{"temperature":0.000006240624091019331,"pressure":-0.0013201320132013201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:12.005Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:12.051Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:21.921Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:21.965Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:22.014Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":-0.0006960696069606961,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:22.014Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:22.067Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:31.928Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:31.974Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:32.019Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.00007200720072007201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:32.019Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:32.064Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:41.932Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:41.977Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:42.022Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.000552055205520552,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:42.023Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:42.068Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:22:52.027Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:22:52.072Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:22:52.229Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":0.0011761176117611762,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:22:52.229Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:22:52.274Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:01.943Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:01.988Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:02.033Z'
}
{
  message: '{"temperature":-0.0000058805880194628806,"pressure":0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:02.033Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:02.078Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:11.949Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:11.995Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:12.040Z'
}
{
  message: '{"temperature":-0.000018001800147828274,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:12.041Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:12.086Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:21.953Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:21.998Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:22.044Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:22.044Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:22.089Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:31.960Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:32.005Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:32.050Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.0011761176117611762,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:32.051Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:32.095Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:41.966Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:42.011Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:42.058Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.000552055205520552,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:42.058Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:42.103Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:23:51.971Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:23:52.016Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:23:52.061Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.00007200720072007201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:23:52.062Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:23:52.106Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:01.977Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:02.023Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:02.069Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":0.0006960696069606961,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:02.070Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:02.115Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:11.983Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:12.028Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:12.073Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":0.0013201320132013201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:12.073Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:12.118Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:21.990Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:22.036Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:22.081Z'
}
{
  message: '{"temperature":-0.000005880588026616153,"pressure":0.0007320732073207321,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:22.082Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:22.127Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:31.995Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:32.040Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:32.085Z'
}
{
  message: '{"temperature":-0.00001800180015140491,"pressure":0.00014401440144014402,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:32.085Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:32.130Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:42.001Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:42.047Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:42.093Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:42.093Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:42.139Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:24:52.006Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:24:52.052Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:24:52.098Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.001032103210321032,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:24:52.099Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:24:52.144Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:25:00.054Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:02.007Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:02.052Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:02.098Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.000408040804080408,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:02.098Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:02.144Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:12.012Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:12.057Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:12.103Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.00021602160216021603,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:12.103Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:12.148Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:22.018Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:22.064Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:22.109Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.0008400840084008401,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:22.109Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:22.155Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:32.024Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:32.069Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:32.114Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":0.0014641464146414641,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:32.114Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:32.160Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:42.030Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:42.076Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:42.121Z'
}
{
  message: '{"temperature":-0.0000177617761418514,"pressure":-0.000312031203120312,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:42.121Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:42.166Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:25:52.033Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:25:52.079Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:25:52.124Z'
}
{
  message: '{"temperature":-0.00001776177614900467,"pressure":0.000312031203120312,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:25:52.125Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:25:52.170Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:02.039Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:02.086Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:02.131Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.0014641464146414641,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:02.131Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:02.177Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:12.046Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:12.091Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:12.136Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":-0.0008400840084008401,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:12.137Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:12.181Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:22.052Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:22.098Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:22.143Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.00021602160216021603,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:22.144Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:22.190Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:32.057Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:32.102Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:32.148Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.000408040804080408,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:32.148Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:32.194Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:42.063Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:42.108Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:42.154Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":0.001032103210321032,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:42.154Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:42.199Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:26:52.069Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:26:52.114Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:26:52.161Z'
}
{
  message: '{"temperature":-0.000005880588026616153,"pressure":0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:26:52.162Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:26:52.207Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:02.074Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:02.120Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:02.166Z'
}
{
  message: '{"temperature":-0.000018001800147828274,"pressure":-0.00014401440144014402,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:02.167Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:02.212Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:12.079Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:12.124Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:12.169Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.0007320732073207321,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:12.170Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:12.215Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:22.085Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:22.130Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:22.175Z'
}
{
  message: '{"temperature":0.000006240624091019331,"pressure":-0.0013201320132013201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:22.176Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:22.221Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:32.091Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:32.136Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:32.181Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":-0.0006960696069606961,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:32.181Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:32.236Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:42.096Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:42.141Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:42.186Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.00007200720072007201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:42.186Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:42.231Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:27:52.102Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:27:52.147Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:27:52.193Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.000552055205520552,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:27:52.194Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:27:52.239Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:02.114Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:02.159Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:02.320Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":0.0011761176117611762,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:02.320Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:02.366Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:12.114Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:12.159Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:12.205Z'
}
{
  message: '{"temperature":-0.0000058805880194628806,"pressure":0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:12.205Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:12.251Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:22.120Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:22.166Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:22.212Z'
}
{
  message: '{"temperature":-0.000018001800147828274,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:22.212Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:22.258Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:32.127Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:32.172Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:32.218Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.0005880588058805881,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:32.219Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:32.264Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:42.133Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:42.178Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:42.223Z'
}
{
  message: '{"temperature":0.000006240624094595968,"pressure":-0.0011761176117611762,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:42.224Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:42.270Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:28:52.139Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:28:52.185Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:28:52.235Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":-0.000552055205520552,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:28:52.235Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:28:52.280Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:02.145Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:02.191Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:02.236Z'
}
{
  message: '{"temperature":0.000006240624105325877,"pressure":0.00007200720072007201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:02.237Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:02.281Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:12.150Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:12.196Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:12.241Z'
}
{
  message: '{"temperature":0.0000062406241017492405,"pressure":0.0006960696069606961,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:12.241Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:12.287Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:22.152Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:22.197Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:22.243Z'
}
{
  message: '{"temperature":0.000006240624098172604,"pressure":0.0013201320132013201,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:22.243Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:22.288Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:32.158Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:32.204Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:32.250Z'
}
{
  message: '{"temperature":-0.000005880588026616153,"pressure":0.0007320732073207321,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:32.250Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:32.296Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:42.162Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:42.207Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:42.252Z'
}
{
  message: '{"temperature":-0.00001800180015140491,"pressure":0.00014401440144014402,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:42.252Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:42.297Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:29:52.168Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:29:52.213Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:29:52.258Z'
}
{
  message: '{"temperature":-0.000005880588023039517,"pressure":-0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:29:52.258Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:29:52.304Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:30:00.053Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:02.172Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:02.218Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:02.264Z'
}
{
  message: '{"temperature":-0.0000056405640242159136,"pressure":0.000156015601560156,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:02.265Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:02.312Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:12.176Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:12.221Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:12.267Z'
}
{
  message: '{"temperature":-0.000005400540014662401,"pressure":0.0007560756075607561,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:12.267Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:12.312Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:22.183Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:22.228Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:22.274Z'
}
{
  message: '{"temperature":-0.0000051605160086855245,"pressure":0.001356135613561356,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:22.274Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:22.320Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:32.189Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:32.234Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:32.280Z'
}
{
  message: '{"temperature":-0.00000492049200986192,"pressure":0.0019561956195619564,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:32.280Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:32.326Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:42.195Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:42.239Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:42.285Z'
}
{
  message: '{"temperature":-0.000004680468014614953,"pressure":0.002556255625562556,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:42.286Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:42.331Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:30:52.201Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:30:52.246Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:30:52.292Z'
}
{
  message: '{"temperature":-0.000028442844252238716,"pressure":0.0007560756075607561,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:30:52.292Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:30:52.337Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:31:02.206Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:31:02.251Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:31:02.297Z'
}
{
  message: '{"temperature":-0.000028202820249838475,"pressure":0.001356135613561356,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:31:02.298Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:31:02.343Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:31:12.211Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:31:12.257Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:31:12.303Z'
}
{
  message: '{"temperature":-0.000003960396003837597,"pressure":-0.000444044404440444,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:31:12.303Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:31:12.348Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:31:17.124Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T13:31:17.127Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:31:17.128Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T13:31:17.128Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:31:32.519Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:31:32.565Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:31:32.612Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:31:32.613Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:31:32.659Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:31:42.524Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:31:42.570Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:31:42.616Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T13:31:42.616Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:31:42.662Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:31:52.531Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:31:52.578Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:31:52.624Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T13:31:52.625Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:31:52.671Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:02.541Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:02.587Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:02.632Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:02.633Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:02.678Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:12.551Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:12.597Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:12.643Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:12.643Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:12.689Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:22.558Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:22.604Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:22.651Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:22.651Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:22.697Z'
}
{
  message: 'Request failed with status code 400',
  name: 'AxiosError',
  code: 'ERR_BAD_REQUEST',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.9',
      'Content-Length': '1471',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    httpsAgent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: <ref *3> ClientRequest {
              _events: [Object: null prototype] {
                abort: [Function (anonymous)],
                aborted: [Function (anonymous)],
                connect: [Function (anonymous)],
                error: [Function (anonymous)],
                socket: [Function (anonymous)],
                timeout: [Function (anonymous)],
                finish: [Function: requestOnFinish]
              },
              _eventsCount: 7,
              _maxListeners: undefined,
              outputData: [],
              outputSize: 0,
              writable: true,
              destroyed: false,
              _last: true,
              chunkedEncoding: false,
              shouldKeepAlive: false,
              maxRequestsOnConnectionReached: false,
              _defaultKeepAlive: true,
              useChunkedEncodingByDefault: true,
              sendDate: false,
              _removedConnection: false,
              _removedContLen: false,
              _removedTE: false,
              strictContentLength: false,
              _contentLength: '1471',
              _hasBody: true,
              _trailer: '',
              finished: true,
              _headerSent: true,
              _closed: false,
              socket: [Circular *1],
              _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.7.9\r\n' +
                'Content-Length: 1471\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: adamantum\r\n' +
                'Connection: close\r\n' +
                '\r\n',
              _keepAliveTimeout: 0,
              _onPendingData: [Function: nop],
              agent: [Circular *2],
              socketPath: undefined,
              method: 'PUT',
              maxHeaderSize: undefined,
              insecureHTTPParser: undefined,
              joinDuplicateHeaders: undefined,
              path: '/api/weather/payload',
              _ended: true,
              res: IncomingMessage {
                _readableState: ReadableState {
                  state: 456758,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _events: [Object: null prototype] {
                  end: [
                    [Function: responseOnEnd],
                    [Function: handleStreamEnd]
                  ],
                  error: [Function: handleStreamError],
                  data: [Function: handleStreamData],
                  aborted: [Function: handlerStreamAborted]
                },
                _eventsCount: 4,
                _maxListeners: undefined,
                socket: [Circular *1],
                httpVersionMajor: 1,
                httpVersionMinor: 1,
                httpVersion: '1.1',
                complete: true,
                rawHeaders: [
                  'Server',
                  'nginx/1.24.0 (Ubuntu)',
                  'Date',
                  'Thu, 20 Feb 2025 13:32:26 GMT',
                  'Content-Type',
                  'text/html; charset=utf-8',
                  'Content-Length',
                  '1210',
                  'Connection',
                  'close',
                  'X-Powered-By',
                  'Express',
                  'Content-Security-Policy',
                  "default-src 'none'",
                  'X-Content-Type-Options',
                  'nosniff'
                ],
                rawTrailers: [],
                joinDuplicateHeaders: undefined,
                aborted: false,
                upgrade: false,
                url: '',
                method: null,
                statusCode: 400,
                statusMessage: 'Bad Request',
                client: [Circular *1],
                _consuming: false,
                _dumped: false,
                req: [Circular *3],
                responseUrl: 'https://adamantum/api/weather/payload',
                redirects: [],
                [Symbol(kCapture)]: false,
                [Symbol(kHeaders)]: {
                  server: 'nginx/1.24.0 (Ubuntu)',
                  date: 'Thu, 20 Feb 2025 13:32:26 GMT',
                  'content-type': 'text/html; charset=utf-8',
                  'content-length': '1210',
                  connection: 'close',
                  'x-powered-by': 'Express',
                  'content-security-policy': "default-src 'none'",
                  'x-content-type-options': 'nosniff'
                },
                [Symbol(kHeadersCount)]: 16,
                [Symbol(kTrailers)]: null,
                [Symbol(kTrailersCount)]: 0
              },
              aborted: false,
              timeoutCb: null,
              upgradeOrConnect: false,
              parser: null,
              maxHeadersCount: null,
              reusedSocket: false,
              host: 'adamantum',
              protocol: 'https:',
              _redirectable: Writable {
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: false,
                  needDrain: false,
                  ending: false,
                  ended: false,
                  finished: false,
                  destroyed: false,
                  decodeStrings: true,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: true,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: true,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                _events: [Object: null prototype] {
                  response: [Function: handleResponse],
                  error: [Function: handleRequestError],
                  socket: [Function: handleRequestSocket]
                },
                _eventsCount: 3,
                _maxListeners: undefined,
                _options: {
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: '/api/weather/payload',
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '1471',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: '',
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload'
                },
                _ended: true,
                _ending: true,
                _redirectCount: 0,
                _redirects: [],
                _requestBodyLength: 1471,
                _requestBodyBuffers: [],
                _onNativeResponse: [Function (anonymous)],
                _currentRequest: [Circular *3],
                _currentUrl: 'https://adamantum/api/weather/payload',
                [Symbol(kCapture)]: false
              },
              [Symbol(kCapture)]: false,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(kNeedDrain)]: false,
              [Symbol(corked)]: 0,
              [Symbol(kOutHeaders)]: [Object: null prototype] {
                accept: [ 'Accept', 'application/json, text/plain, */*' ],
                'content-type': [ 'Content-Type', 'application/json' ],
                'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                'content-length': [ 'Content-Length', '1471' ],
                'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                host: [ 'Host', 'adamantum' ]
              },
              [Symbol(errored)]: null,
              [Symbol(kHighWaterMark)]: 16384,
              [Symbol(kRejectNonStandardBodyWrites)]: false,
              [Symbol(kUniqueHeaders)]: null
            },
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '1471',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    method: 'put',
    url: 'https://adamantum/api/weather/payload',
    data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":8,"id":"fb8604cb-211c-4807-95f0-7f7ef669fa02","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"80475ca2-47eb-4913-b715-784dba9bf96c","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"eb1c0f58-978b-432f-81cd-9af123f780f5","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":5,"id":"3930cb61-f514-4c7a-9e2d-e52f5669e643","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":4,"id":"1ef4e2f3-e4c8-468e-9bee-3700c6672a30","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"6d14acd3-9066-4e40-9bba-5200af69ecaf","location":"adamantum"}],"hash":"9ffb252af6664ec96fcd61392f90e6e9"}'
  },
  request: <ref *3> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '1471',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    socket: <ref *1> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext { context: SecureContext {} },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: false,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'adamantum',
      alpnProtocol: false,
      authorized: false,
      authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          [Function: onSocketCloseDestroySSL],
          [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          [Function: onClose],
          [Function: socketCloseListener]
        ],
        end: [Function: onReadableStreamEnd],
        newListener: [Function: keylogNewListener],
        secure: [Function: onConnectSecure],
        session: [Function (anonymous)],
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove],
        error: [Function: socketErrorListener],
        finish: [Function: bound onceWrapper] { listener: [Function: destroy] }
      },
      _eventsCount: 10,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'adamantum',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        state: 266328,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: true,
        needDrain: false,
        ending: true,
        ended: true,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 1,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _requestCert: true,
      _rejectUnauthorized: false,
      parser: null,
      _httpMessage: [Circular *3],
      [Symbol(alpncallback)]: null,
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: 126,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _parentWrap: null,
        _secureContext: SecureContext { context: SecureContext {} },
        reading: true,
        onkeylog: [Function: onkeylog],
        onhandshakestart: {},
        onhandshakedone: [Function (anonymous)],
        onocspresponse: [Function: onocspresponse],
        onnewsession: [Function: onnewsessionclient],
        onerror: [Function: onerror],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: false,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: [Function: checkServerIdentity],
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '1471',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: 443,
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 0,
          maxCachedSessions: 100,
          _sessionCache: { map: {}, list: [] },
          [Symbol(kCapture)]: false
        },
        host: 'adamantum',
        noDelay: true,
        servername: 'adamantum',
        _agentKey: 'adamantum:443::::::::false:::::::::::::',
        encoding: null,
        singleUse: true
      }
    },
    _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/1.7.9\r\n' +
      'Content-Length: 1471\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: adamantum\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: <ref *2> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: false,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'adamantum:443::::::::false:::::::::::::': [
          <ref *1> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: false,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'adamantum',
            alpnProtocol: false,
            authorized: false,
            authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener],
              finish: [Function: bound onceWrapper] {
                listener: [Function: destroy]
              }
            },
            _eventsCount: 10,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'adamantum',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              state: 266328,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              errored: null,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 1,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _requestCert: true,
            _rejectUnauthorized: false,
            parser: null,
            _httpMessage: [Circular *3],
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 126,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _parentWrap: null,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *1]
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: false,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'PUT',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.9',
                'Content-Length': '1471',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: [Circular *2] },
              auth: undefined,
              family: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'adamantum',
              port: 443,
              agent: [Circular *2],
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/weather/payload',
              _defaultAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              host: 'adamantum',
              noDelay: true,
              servername: 'adamantum',
              _agentKey: 'adamantum:443::::::::false:::::::::::::',
              encoding: null,
              singleUse: true
            }
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
        },
        list: [ 'adamantum:443::::::::false:::::::::::::' ]
      },
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'PUT',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/api/weather/payload',
    _ended: true,
    res: IncomingMessage {
      _readableState: ReadableState {
        state: 456758,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        errored: null,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        aborted: [Function: handlerStreamAborted]
      },
      _eventsCount: 4,
      _maxListeners: undefined,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '1471',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Server',
        'nginx/1.24.0 (Ubuntu)',
        'Date',
        'Thu, 20 Feb 2025 13:32:26 GMT',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '1210',
        'Connection',
        'close',
        'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        "default-src 'none'",
        'X-Content-Type-Options',
        'nosniff'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 400,
      statusMessage: 'Bad Request',
      client: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '1471',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *3],
      responseUrl: 'https://adamantum/api/weather/payload',
      redirects: [],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        server: 'nginx/1.24.0 (Ubuntu)',
        date: 'Thu, 20 Feb 2025 13:32:26 GMT',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '1210',
        connection: 'close',
        'x-powered-by': 'Express',
        'content-security-policy': "default-src 'none'",
        'x-content-type-options': 'nosniff'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'adamantum',
    protocol: 'https:',
    _redirectable: Writable {
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      _events: [Object: null prototype] {
        response: [Function: handleResponse],
        error: [Function: handleRequestError],
        socket: [Function: handleRequestSocket]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/api/weather/payload',
        method: 'PUT',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.9',
          'Content-Length': '1471',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: <ref *4> {
          http: undefined,
          https: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '1471',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: [Circular *4],
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          }
        },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'adamantum',
        port: '',
        agent: <ref *2> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            rejectUnauthorized: false,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'adamantum:443::::::::false:::::::::::::': [
              <ref *1> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: false,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'adamantum',
                alpnProtocol: false,
                authorized: false,
                authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener],
                  finish: [Function: bound onceWrapper] {
                    listener: [Function: destroy]
                  }
                },
                _eventsCount: 10,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'adamantum',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  state: 266328,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  errored: null,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: false,
                  destroyed: false,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 1,
                  constructed: true,
                  prefinished: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: false,
                  closeEmitted: false,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _requestCert: true,
                _rejectUnauthorized: false,
                parser: null,
                _httpMessage: [Circular *3],
                [Symbol(alpncallback)]: null,
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 126,
                [Symbol(kHandle)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _parentWrap: null,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 0,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: false,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'PUT',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'application/json',
                    'User-Agent': 'axios/1.7.9',
                    'Content-Length': '1471',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: <ref *4> { http: undefined, https: [Circular *2] },
                  auth: undefined,
                  family: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'adamantum',
                  port: 443,
                  agent: [Circular *2],
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/weather/payload',
                  _defaultAgent: Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {},
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 0,
                    maxCachedSessions: 100,
                    _sessionCache: { map: {}, list: [] },
                    [Symbol(kCapture)]: false
                  },
                  host: 'adamantum',
                  noDelay: true,
                  servername: 'adamantum',
                  _agentKey: 'adamantum:443::::::::false:::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
            },
            list: [ 'adamantum:443::::::::false:::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE'
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: [Function: Agent] { defaultMaxSockets: Infinity },
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function: __node_internal_],
            validateHeaderValue: [Function: __node_internal_],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/api/weather/payload'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 1471,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *3],
      _currentUrl: 'https://adamantum/api/weather/payload',
      [Symbol(kCapture)]: false
    },
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'content-type': [ 'Content-Type', 'application/json' ],
      'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
      'content-length': [ 'Content-Length', '1471' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'adamantum' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 400,
    statusText: 'Bad Request',
    headers: Object [AxiosHeaders] {
      server: 'nginx/1.24.0 (Ubuntu)',
      date: 'Thu, 20 Feb 2025 13:32:26 GMT',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '1210',
      connection: 'close',
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.7.9',
        'Content-Length': '1471',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      httpsAgent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: <ref *3> ClientRequest {
                _events: [Object: null prototype] {
                  abort: [Function (anonymous)],
                  aborted: [Function (anonymous)],
                  connect: [Function (anonymous)],
                  error: [Function (anonymous)],
                  socket: [Function (anonymous)],
                  timeout: [Function (anonymous)],
                  finish: [Function: requestOnFinish]
                },
                _eventsCount: 7,
                _maxListeners: undefined,
                outputData: [],
                outputSize: 0,
                writable: true,
                destroyed: false,
                _last: true,
                chunkedEncoding: false,
                shouldKeepAlive: false,
                maxRequestsOnConnectionReached: false,
                _defaultKeepAlive: true,
                useChunkedEncodingByDefault: true,
                sendDate: false,
                _removedConnection: false,
                _removedContLen: false,
                _removedTE: false,
                strictContentLength: false,
                _contentLength: '1471',
                _hasBody: true,
                _trailer: '',
                finished: true,
                _headerSent: true,
                _closed: false,
                socket: [Circular *1],
                _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
                  'Accept: application/json, text/plain, */*\r\n' +
                  'Content-Type: application/json\r\n' +
                  'User-Agent: axios/1.7.9\r\n' +
                  'Content-Length: 1471\r\n' +
                  'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                  'Host: adamantum\r\n' +
                  'Connection: close\r\n' +
                  '\r\n',
                _keepAliveTimeout: 0,
                _onPendingData: [Function: nop],
                agent: [Circular *2],
                socketPath: undefined,
                method: 'PUT',
                maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                joinDuplicateHeaders: undefined,
                path: '/api/weather/payload',
                _ended: true,
                res: IncomingMessage {
                  _readableState: ReadableState {
                    state: 456758,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _events: [Object: null prototype] {
                    end: [
                      [Function: responseOnEnd],
                      [Function: handleStreamEnd]
                    ],
                    error: [Function: handleStreamError],
                    data: [Function: handleStreamData],
                    aborted: [Function: handlerStreamAborted]
                  },
                  _eventsCount: 4,
                  _maxListeners: undefined,
                  socket: [Circular *1],
                  httpVersionMajor: 1,
                  httpVersionMinor: 1,
                  httpVersion: '1.1',
                  complete: true,
                  rawHeaders: [
                    'Server',
                    'nginx/1.24.0 (Ubuntu)',
                    'Date',
                    'Thu, 20 Feb 2025 13:32:26 GMT',
                    'Content-Type',
                    'text/html; charset=utf-8',
                    'Content-Length',
                    '1210',
                    'Connection',
                    'close',
                    'X-Powered-By',
                    'Express',
                    'Content-Security-Policy',
                    "default-src 'none'",
                    'X-Content-Type-Options',
                    'nosniff'
                  ],
                  rawTrailers: [],
                  joinDuplicateHeaders: undefined,
                  aborted: false,
                  upgrade: false,
                  url: '',
                  method: null,
                  statusCode: 400,
                  statusMessage: 'Bad Request',
                  client: [Circular *1],
                  _consuming: false,
                  _dumped: false,
                  req: [Circular *3],
                  responseUrl: 'https://adamantum/api/weather/payload',
                  redirects: [],
                  [Symbol(kCapture)]: false,
                  [Symbol(kHeaders)]: {
                    server: 'nginx/1.24.0 (Ubuntu)',
                    date: 'Thu, 20 Feb 2025 13:32:26 GMT',
                    'content-type': 'text/html; charset=utf-8',
                    'content-length': '1210',
                    connection: 'close',
                    'x-powered-by': 'Express',
                    'content-security-policy': "default-src 'none'",
                    'x-content-type-options': 'nosniff'
                  },
                  [Symbol(kHeadersCount)]: 16,
                  [Symbol(kTrailers)]: null,
                  [Symbol(kTrailersCount)]: 0
                },
                aborted: false,
                timeoutCb: null,
                upgradeOrConnect: false,
                parser: null,
                maxHeadersCount: null,
                reusedSocket: false,
                host: 'adamantum',
                protocol: 'https:',
                _redirectable: Writable {
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    destroyed: false,
                    decodeStrings: true,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: true,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  _events: [Object: null prototype] {
                    response: [Function: handleResponse],
                    error: [Function: handleRequestError],
                    socket: [Function: handleRequestSocket]
                  },
                  _eventsCount: 3,
                  _maxListeners: undefined,
                  _options: {
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: '/api/weather/payload',
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '1471',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: '',
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload'
                  },
                  _ended: true,
                  _ending: true,
                  _redirectCount: 0,
                  _redirects: [],
                  _requestBodyLength: 1471,
                  _requestBodyBuffers: [],
                  _onNativeResponse: [Function (anonymous)],
                  _currentRequest: [Circular *3],
                  _currentUrl: 'https://adamantum/api/weather/payload',
                  [Symbol(kCapture)]: false
                },
                [Symbol(kCapture)]: false,
                [Symbol(kBytesWritten)]: 0,
                [Symbol(kNeedDrain)]: false,
                [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
                  accept: [ 'Accept', 'application/json, text/plain, */*' ],
                  'content-type': [ 'Content-Type', 'application/json' ],
                  'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
                  'content-length': [ 'Content-Length', '1471' ],
                  'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
                  host: [ 'Host', 'adamantum' ]
                },
                [Symbol(errored)]: null,
                [Symbol(kHighWaterMark)]: 16384,
                [Symbol(kRejectNonStandardBodyWrites)]: false,
                [Symbol(kUniqueHeaders)]: null
              },
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '1471',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      method: 'put',
      url: 'https://adamantum/api/weather/payload',
      data: '{"data":[{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"92ec1cb6-df4f-4a94-b931-e614cc7a157e","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"414e627b-047c-46f7-8148-ffc87b59bdfd","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"a54e3f7a-c1e7-44ba-955d-4ceffcef7728","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":2,"id":"0a120365-fc13-4f33-96ea-4ccd885d3c1d","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"26b4de69-80a4-4f84-aa30-5e30c3feb5ff","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":8,"id":"fb8604cb-211c-4807-95f0-7f7ef669fa02","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":7,"id":"80475ca2-47eb-4913-b715-784dba9bf96c","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":6,"id":"eb1c0f58-978b-432f-81cd-9af123f780f5","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":5,"id":"3930cb61-f514-4c7a-9e2d-e52f5669e643","location":"adamantum"},{"temperature":294.96,"pressure":101250,"humidity":27,"ts":4,"id":"1ef4e2f3-e4c8-468e-9bee-3700c6672a30","location":"adamantum"},{"temperature":294.98,"pressure":101248,"humidity":27,"ts":3,"id":"6d14acd3-9066-4e40-9bba-5200af69ecaf","location":"adamantum"}],"hash":"9ffb252af6664ec96fcd61392f90e6e9"}'
    },
    request: <ref *3> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '1471',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: <ref *1> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext { context: SecureContext {} },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: false,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'adamantum',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            [Function: onSocketCloseDestroySSL],
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: onClose],
            [Function: socketCloseListener]
          ],
          end: [Function: onReadableStreamEnd],
          newListener: [Function: keylogNewListener],
          secure: [Function: onConnectSecure],
          session: [Function (anonymous)],
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove],
          error: [Function: socketErrorListener],
          finish: [Function: bound onceWrapper] {
            listener: [Function: destroy]
          }
        },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'adamantum',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          state: 266328,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: true,
          needDrain: false,
          ending: true,
          ended: true,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 1,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        _requestCert: true,
        _rejectUnauthorized: false,
        parser: null,
        _httpMessage: [Circular *3],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 126,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _parentWrap: null,
          _secureContext: SecureContext { context: SecureContext {} },
          reading: true,
          onkeylog: [Function: onkeylog],
          onhandshakestart: {},
          onhandshakedone: [Function (anonymous)],
          onocspresponse: [Function: onocspresponse],
          onnewsession: [Function: onnewsessionclient],
          onerror: [Function: onerror],
          [Symbol(owner_symbol)]: [Circular *1]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: false,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: [Function: checkServerIdentity],
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '1471',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: 443,
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload',
          _defaultAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            [Symbol(kCapture)]: false
          },
          host: 'adamantum',
          noDelay: true,
          servername: 'adamantum',
          _agentKey: 'adamantum:443::::::::false:::::::::::::',
          encoding: null,
          singleUse: true
        }
      },
      _header: 'PUT /api/weather/payload HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.7.9\r\n' +
        'Content-Length: 1471\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: adamantum\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: <ref *2> Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype] {
          rejectUnauthorized: false,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'adamantum:443::::::::false:::::::::::::': [
            <ref *1> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: false,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'adamantum',
              alpnProtocol: false,
              authorized: false,
              authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener],
                finish: [Function: bound onceWrapper] {
                  listener: [Function: destroy]
                }
              },
              _eventsCount: 10,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'adamantum',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                state: 266328,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                errored: null,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: false,
                destroyed: false,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 1,
                constructed: true,
                prefinished: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: false,
                closeEmitted: false,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              _requestCert: true,
              _rejectUnauthorized: false,
              parser: null,
              _httpMessage: [Circular *3],
              [Symbol(alpncallback)]: null,
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 126,
              [Symbol(kHandle)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *1]
                },
                _parentWrap: null,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *1]
              },
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0,
              [Symbol(connect-options)]: {
                rejectUnauthorized: false,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'PUT',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'application/json',
                  'User-Agent': 'axios/1.7.9',
                  'Content-Length': '1471',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: <ref *4> { http: undefined, https: [Circular *2] },
                auth: undefined,
                family: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'adamantum',
                port: 443,
                agent: [Circular *2],
                nativeProtocols: {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/weather/payload',
                _defaultAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                host: 'adamantum',
                noDelay: true,
                servername: 'adamantum',
                _agentKey: 'adamantum:443::::::::false:::::::::::::',
                encoding: null,
                singleUse: true
              }
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        maxCachedSessions: 100,
        _sessionCache: {
          map: {
            'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
          },
          list: [ 'adamantum:443::::::::false:::::::::::::' ]
        },
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'PUT',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/weather/payload',
      _ended: true,
      res: IncomingMessage {
        _readableState: ReadableState {
          state: 456758,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          errored: null,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          aborted: [Function: handlerStreamAborted]
        },
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '1471',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Server',
          'nginx/1.24.0 (Ubuntu)',
          'Date',
          'Thu, 20 Feb 2025 13:32:26 GMT',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '1210',
          'Connection',
          'close',
          'X-Powered-By',
          'Express',
          'Content-Security-Policy',
          "default-src 'none'",
          'X-Content-Type-Options',
          'nosniff'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: <ref *1> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: false,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'adamantum',
          alpnProtocol: false,
          authorized: false,
          authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener],
            finish: [Function: bound onceWrapper] {
              listener: [Function: destroy]
            }
          },
          _eventsCount: 10,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'adamantum',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            state: 266328,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            errored: null,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 1,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          _requestCert: true,
          _rejectUnauthorized: false,
          parser: null,
          _httpMessage: [Circular *3],
          [Symbol(alpncallback)]: null,
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 126,
          [Symbol(kHandle)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *1]
            },
            _parentWrap: null,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *1]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(connect-options)]: {
            rejectUnauthorized: false,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'PUT',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'application/json',
              'User-Agent': 'axios/1.7.9',
              'Content-Length': '1471',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: <ref *4> {
              http: undefined,
              https: <ref *2> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  rejectUnauthorized: false,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                  },
                  list: [ 'adamantum:443::::::::false:::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              }
            },
            auth: undefined,
            family: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'adamantum',
            port: 443,
            agent: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [ [Circular *1] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {},
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 0,
                  maxCachedSessions: 100,
                  _sessionCache: { map: {}, list: [] },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/weather/payload',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 0,
              maxCachedSessions: 100,
              _sessionCache: { map: {}, list: [] },
              [Symbol(kCapture)]: false
            },
            host: 'adamantum',
            noDelay: true,
            servername: 'adamantum',
            _agentKey: 'adamantum:443::::::::false:::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *3],
        responseUrl: 'https://adamantum/api/weather/payload',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          server: 'nginx/1.24.0 (Ubuntu)',
          date: 'Thu, 20 Feb 2025 13:32:26 GMT',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '1210',
          connection: 'close',
          'x-powered-by': 'Express',
          'content-security-policy': "default-src 'none'",
          'x-content-type-options': 'nosniff'
        },
        [Symbol(kHeadersCount)]: 16,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'adamantum',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: true,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: true,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: true,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        _events: [Object: null prototype] {
          response: [Function: handleResponse],
          error: [Function: handleRequestError],
          socket: [Function: handleRequestSocket]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: '/api/weather/payload',
          method: 'PUT',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.9',
            'Content-Length': '1471',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: <ref *4> {
            http: undefined,
            https: <ref *2> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                rejectUnauthorized: false,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'adamantum:443::::::::false:::::::::::::': [
                  <ref *1> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext { context: SecureContext {} },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: false,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'adamantum',
                    alpnProtocol: false,
                    authorized: false,
                    authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        [Function: onSocketCloseDestroySSL],
                        [Function: bound onceWrapper] {
                          listener: [Function (anonymous)]
                        },
                        [Function: onClose],
                        [Function: socketCloseListener]
                      ],
                      end: [Function: onReadableStreamEnd],
                      newListener: [Function: keylogNewListener],
                      secure: [Function: onConnectSecure],
                      session: [Function (anonymous)],
                      free: [Function: onFree],
                      timeout: [Function: onTimeout],
                      agentRemove: [Function: onRemove],
                      error: [Function: socketErrorListener],
                      finish: [Function: bound onceWrapper] {
                        listener: [Function: destroy]
                      }
                    },
                    _eventsCount: 10,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'adamantum',
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      state: 266328,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: [],
                      flowing: true,
                      errored: null,
                      defaultEncoding: 'utf8',
                      awaitDrainWriters: null,
                      decoder: null,
                      encoding: null,
                      [Symbol(kPaused)]: false
                    },
                    _maxListeners: undefined,
                    _writableState: WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      afterWriteTickInfo: null,
                      buffered: [],
                      bufferedIndex: 0,
                      allBuffers: true,
                      allNoop: true,
                      pendingcb: 1,
                      constructed: true,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      autoDestroy: true,
                      errored: null,
                      closed: false,
                      closeEmitted: false,
                      [Symbol(kOnFinished)]: []
                    },
                    allowHalfOpen: false,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _requestCert: true,
                    _rejectUnauthorized: false,
                    parser: null,
                    _httpMessage: [Circular *3],
                    [Symbol(alpncallback)]: null,
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: 126,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *1]
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext { context: SecureContext {} },
                      reading: true,
                      onkeylog: [Function: onkeylog],
                      onhandshakestart: {},
                      onhandshakedone: [Function (anonymous)],
                      onocspresponse: [Function: onocspresponse],
                      onnewsession: [Function: onnewsessionclient],
                      onerror: [Function: onerror],
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 60,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: false,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: [Function: checkServerIdentity],
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'https:',
                      path: null,
                      method: 'PUT',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.7.9',
                        'Content-Length': '1471',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: [Circular *4],
                      auth: undefined,
                      family: undefined,
                      beforeRedirect: [Function: dispatchBeforeRedirect],
                      beforeRedirects: { proxy: [Function: beforeRedirect] },
                      hostname: 'adamantum',
                      port: 443,
                      agent: [Circular *2],
                      nativeProtocols: {
                        'http:': {
                          _connectionListener: [Function: connectionListener],
                          METHODS: [
                            'ACL',         'BIND',       'CHECKOUT',
                            'CONNECT',     'COPY',       'DELETE',
                            'GET',         'HEAD',       'LINK',
                            'LOCK',        'M-SEARCH',   'MERGE',
                            'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                            'MOVE',        'NOTIFY',     'OPTIONS',
                            'PATCH',       'POST',       'PROPFIND',
                            'PROPPATCH',   'PURGE',      'PUT',
                            'REBIND',      'REPORT',     'SEARCH',
                            'SOURCE',      'SUBSCRIBE',  'TRACE',
                            'UNBIND',      'UNLINK',     'UNLOCK',
                            'UNSUBSCRIBE'
                          ],
                          STATUS_CODES: {
                            '100': 'Continue',
                            '101': 'Switching Protocols',
                            '102': 'Processing',
                            '103': 'Early Hints',
                            '200': 'OK',
                            '201': 'Created',
                            '202': 'Accepted',
                            '203': 'Non-Authoritative Information',
                            '204': 'No Content',
                            '205': 'Reset Content',
                            '206': 'Partial Content',
                            '207': 'Multi-Status',
                            '208': 'Already Reported',
                            '226': 'IM Used',
                            '300': 'Multiple Choices',
                            '301': 'Moved Permanently',
                            '302': 'Found',
                            '303': 'See Other',
                            '304': 'Not Modified',
                            '305': 'Use Proxy',
                            '307': 'Temporary Redirect',
                            '308': 'Permanent Redirect',
                            '400': 'Bad Request',
                            '401': 'Unauthorized',
                            '402': 'Payment Required',
                            '403': 'Forbidden',
                            '404': 'Not Found',
                            '405': 'Method Not Allowed',
                            '406': 'Not Acceptable',
                            '407': 'Proxy Authentication Required',
                            '408': 'Request Timeout',
                            '409': 'Conflict',
                            '410': 'Gone',
                            '411': 'Length Required',
                            '412': 'Precondition Failed',
                            '413': 'Payload Too Large',
                            '414': 'URI Too Long',
                            '415': 'Unsupported Media Type',
                            '416': 'Range Not Satisfiable',
                            '417': 'Expectation Failed',
                            '418': "I'm a Teapot",
                            '421': 'Misdirected Request',
                            '422': 'Unprocessable Entity',
                            '423': 'Locked',
                            '424': 'Failed Dependency',
                            '425': 'Too Early',
                            '426': 'Upgrade Required',
                            '428': 'Precondition Required',
                            '429': 'Too Many Requests',
                            '431': 'Request Header Fields Too Large',
                            '451': 'Unavailable For Legal Reasons',
                            '500': 'Internal Server Error',
                            '501': 'Not Implemented',
                            '502': 'Bad Gateway',
                            '503': 'Service Unavailable',
                            '504': 'Gateway Timeout',
                            '505': 'HTTP Version Not Supported',
                            '506': 'Variant Also Negotiates',
                            '507': 'Insufficient Storage',
                            '508': 'Loop Detected',
                            '509': 'Bandwidth Limit Exceeded',
                            '510': 'Not Extended',
                            '511': 'Network Authentication Required'
                          },
                          Agent: [Function: Agent] {
                            defaultMaxSockets: Infinity
                          },
                          ClientRequest: [Function: ClientRequest],
                          IncomingMessage: [Function: IncomingMessage],
                          OutgoingMessage: [Function: OutgoingMessage],
                          Server: [Function: Server],
                          ServerResponse: [Function: ServerResponse],
                          createServer: [Function: createServer],
                          validateHeaderName: [Function: __node_internal_],
                          validateHeaderValue: [Function: __node_internal_],
                          get: [Function: get],
                          request: [Function: request],
                          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                          maxHeaderSize: [Getter],
                          globalAgent: [Getter/Setter]
                        },
                        'https:': {
                          Agent: [Function: Agent],
                          globalAgent: Agent {
                            _events: [Object: null prototype] {
                              free: [Function (anonymous)],
                              newListener: [Function: maybeEnableKeylog]
                            },
                            _eventsCount: 2,
                            _maxListeners: undefined,
                            defaultPort: 443,
                            protocol: 'https:',
                            options: [Object: null prototype] {
                              noDelay: true,
                              path: null
                            },
                            requests: [Object: null prototype] {},
                            sockets: [Object: null prototype] {},
                            freeSockets: [Object: null prototype] {},
                            keepAliveMsecs: 1000,
                            keepAlive: false,
                            maxSockets: Infinity,
                            maxFreeSockets: 256,
                            scheduling: 'lifo',
                            maxTotalSockets: Infinity,
                            totalSocketCount: 0,
                            maxCachedSessions: 100,
                            _sessionCache: { map: {}, list: [] },
                            [Symbol(kCapture)]: false
                          },
                          Server: [Function: Server],
                          createServer: [Function: createServer],
                          get: [Function: get],
                          request: [Function: request]
                        }
                      },
                      pathname: '/api/weather/payload',
                      _defaultAgent: Agent {
                        _events: [Object: null prototype] {
                          free: [Function (anonymous)],
                          newListener: [Function: maybeEnableKeylog]
                        },
                        _eventsCount: 2,
                        _maxListeners: undefined,
                        defaultPort: 443,
                        protocol: 'https:',
                        options: [Object: null prototype] {
                          noDelay: true,
                          path: null
                        },
                        requests: [Object: null prototype] {},
                        sockets: [Object: null prototype] {},
                        freeSockets: [Object: null prototype] {},
                        keepAliveMsecs: 1000,
                        keepAlive: false,
                        maxSockets: Infinity,
                        maxFreeSockets: 256,
                        scheduling: 'lifo',
                        maxTotalSockets: Infinity,
                        totalSocketCount: 0,
                        maxCachedSessions: 100,
                        _sessionCache: { map: {}, list: [] },
                        [Symbol(kCapture)]: false
                      },
                      host: 'adamantum',
                      noDelay: true,
                      servername: 'adamantum',
                      _agentKey: 'adamantum:443::::::::false:::::::::::::',
                      encoding: null,
                      singleUse: true
                    }
                  }
                ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
                },
                list: [ 'adamantum:443::::::::false:::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            }
          },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'adamantum',
          port: '',
          agent: <ref *2> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              rejectUnauthorized: false,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'adamantum:443::::::::false:::::::::::::': [
                <ref *1> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: false,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'adamantum',
                  alpnProtocol: false,
                  authorized: false,
                  authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener],
                    finish: [Function: bound onceWrapper] {
                      listener: [Function: destroy]
                    }
                  },
                  _eventsCount: 10,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'adamantum',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    state: 266328,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    errored: null,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: false,
                    destroyed: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 1,
                    constructed: true,
                    prefinished: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: false,
                    closeEmitted: false,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  _requestCert: true,
                  _rejectUnauthorized: false,
                  parser: null,
                  _httpMessage: [Circular *3],
                  [Symbol(alpncallback)]: null,
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 126,
                  [Symbol(kHandle)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *1]
                    },
                    _parentWrap: null,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *1]
                  },
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 0,
                  [Symbol(kBytesWritten)]: 0,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: false,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'PUT',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'application/json',
                      'User-Agent': 'axios/1.7.9',
                      'Content-Length': '1471',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: <ref *4> { http: undefined, https: [Circular *2] },
                    auth: undefined,
                    family: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'adamantum',
                    port: 443,
                    agent: [Circular *2],
                    nativeProtocols: {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: Agent {
                          _events: [Object: null prototype] {
                            free: [Function (anonymous)],
                            newListener: [Function: maybeEnableKeylog]
                          },
                          _eventsCount: 2,
                          _maxListeners: undefined,
                          defaultPort: 443,
                          protocol: 'https:',
                          options: [Object: null prototype] {
                            noDelay: true,
                            path: null
                          },
                          requests: [Object: null prototype] {},
                          sockets: [Object: null prototype] {},
                          freeSockets: [Object: null prototype] {},
                          keepAliveMsecs: 1000,
                          keepAlive: false,
                          maxSockets: Infinity,
                          maxFreeSockets: 256,
                          scheduling: 'lifo',
                          maxTotalSockets: Infinity,
                          totalSocketCount: 0,
                          maxCachedSessions: 100,
                          _sessionCache: { map: {}, list: [] },
                          [Symbol(kCapture)]: false
                        },
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/weather/payload',
                    _defaultAgent: Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {},
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 0,
                      maxCachedSessions: 100,
                      _sessionCache: { map: {}, list: [] },
                      [Symbol(kCapture)]: false
                    },
                    host: 'adamantum',
                    noDelay: true,
                    servername: 'adamantum',
                    _agentKey: 'adamantum:443::::::::false:::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'adamantum:443::::::::false:::::::::::::': <Buffer 30 82 04 00 02 01 01 02 02 03 03 04 02 c0 30 04 20 84 50 b0 03 f8 14 00 e4 db 8c f4 47 f6 4b 99 d4 74 a4 b0 25 da 9c b2 f7 d6 e6 03 3f dd 96 35 cd 04 ... 978 more bytes>
              },
              list: [ 'adamantum:443::::::::false:::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          nativeProtocols: {
            'http:': {
              _connectionListener: [Function: connectionListener],
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE'
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: [Function: Agent] { defaultMaxSockets: Infinity },
              ClientRequest: [Function: ClientRequest],
              IncomingMessage: [Function: IncomingMessage],
              OutgoingMessage: [Function: OutgoingMessage],
              Server: [Function: Server],
              ServerResponse: [Function: ServerResponse],
              createServer: [Function: createServer],
              validateHeaderName: [Function: __node_internal_],
              validateHeaderValue: [Function: __node_internal_],
              get: [Function: get],
              request: [Function: request],
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: [Function: Agent],
              globalAgent: Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 0,
                maxCachedSessions: 100,
                _sessionCache: { map: {}, list: [] },
                [Symbol(kCapture)]: false
              },
              Server: [Function: Server],
              createServer: [Function: createServer],
              get: [Function: get],
              request: [Function: request]
            }
          },
          pathname: '/api/weather/payload'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 1471,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *3],
        _currentUrl: 'https://adamantum/api/weather/payload',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.7.9' ],
        'content-length': [ 'Content-Length', '1471' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'adamantum' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>ValidateError<br> &nbsp; &nbsp;at getValidatedArgs (/home/kim/src/weather-hub/dist/routes/routes.js:439:19)<br> &nbsp; &nbsp;at PayloadController_SavePayload (/home/kim/src/weather-hub/dist/routes/routes.js:155:29)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (/home/kim/src/weather-hub/node_modules/express/lib/router/layer.js:95:5)<br> &nbsp; &nbsp;at next (/home/kim/src/weather-hub/node_modules/express/lib/router/route.js:149:13)<br> &nbsp; &nbsp;at Route.dispatch (/home/kim/src/weather-hub/node_modules/express/lib/router/route.js:119:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (/home/kim/src/weather-hub/node_modules/express/lib/router/layer.js:95:5)<br> &nbsp; &nbsp;at /home/kim/src/weather-hub/node_modules/express/lib/router/index.js:284:15<br> &nbsp; &nbsp;at Function.process_params (/home/kim/src/weather-hub/node_modules/express/lib/router/index.js:346:12)<br> &nbsp; &nbsp;at next (/home/kim/src/weather-hub/node_modules/express/lib/router/index.js:280:10)<br> &nbsp; &nbsp;at /home/kim/src/weather-hub/node_modules/body-parser/lib/read.js:137:5</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  status: 400,
  level: 'error',
  timestamp: '2025-02-20T13:32:28.647Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:32.561Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:32.607Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:32.652Z'
}
{
  message: '{"temperature":24.579285714285646,"pressure":8437.57142857143,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:32.653Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:32.698Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:42.572Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:42.617Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:42.663Z'
}
{
  message: '{"temperature":19.661999999999967,"pressure":6749.933333333333,"humidity":1.8}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:42.663Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:42.709Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:32:52.582Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:32:52.628Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:32:52.674Z'
}
{
  message: '{"temperature":16.08727272727269,"pressure":5522.703030303031,"humidity":1.4727272727272727}',
  level: 'debug',
  timestamp: '2025-02-20T13:32:52.674Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:32:52.719Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:02.592Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:02.638Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:02.684Z'
}
{
  message: '{"temperature":13.407090909090874,"pressure":4602.181818181818,"humidity":1.2272727272727273}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:02.684Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:02.730Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:12.698Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:12.743Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:12.900Z'
}
{
  message: '{"temperature":11.344405594405561,"pressure":3894.181818181818,"humidity":1.0384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:12.900Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:12.945Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:22.611Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:22.658Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:22.704Z'
}
{
  message: '{"temperature":9.723736263736233,"pressure":3337.8901098901097,"humidity":0.8901098901098901}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:22.704Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:22.749Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:32.621Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:32.666Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:32.711Z'
}
{
  message: '{"temperature":8.427208791208765,"pressure":2892.852747252747,"humidity":0.7714285714285715}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:32.712Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:32.757Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:42.631Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:42.677Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:42.722Z'
}
{
  message: '{"temperature":7.373785714285706,"pressure":2531.2571428571428,"humidity":0.675}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:42.722Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:42.767Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:33:52.640Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:33:52.686Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:33:52.731Z'
}
{
  message: '{"temperature":6.506264705882345,"pressure":2233.470588235294,"humidity":0.5955882352941176}',
  level: 'debug',
  timestamp: '2025-02-20T13:33:52.732Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:33:52.777Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:02.651Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:02.696Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:02.742Z'
}
{
  message: '{"temperature":5.782941176470586,"pressure":1985.2745098039215,"humidity":0.5294117647058824}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:02.743Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:02.788Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:12.661Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:12.706Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:12.751Z'
}
{
  message: '{"temperature":5.174241486068118,"pressure":1776.3075335397316,"humidity":0.47368421052631576}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:12.751Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:12.796Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:22.669Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:22.714Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:22.760Z'
}
{
  message: '{"temperature":4.6571578947368435,"pressure":1598.6526315789474,"humidity":0.4263157894736842}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:22.760Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:22.806Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:32.670Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:32.715Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:32.761Z'
}
{
  message: '{"temperature":4.213609022556391,"pressure":1446.409022556391,"humidity":0.38571428571428573}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:32.761Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:32.807Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:42.680Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:42.726Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:42.771Z'
}
{
  message: '{"temperature":3.83054545454545,"pressure":1314.9246753246753,"humidity":0.35064935064935066}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:42.772Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:42.817Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:34:52.690Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:34:52.736Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:34:52.782Z'
}
{
  message: '{"temperature":3.497447769621684,"pressure":1200.5894974590626,"humidity":0.3201581027667984}',
  level: 'debug',
  timestamp: '2025-02-20T13:34:52.782Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:34:52.827Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:35:00.059Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:35:02.691Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:35:02.736Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:35:02.782Z'
}
{
  message: '{"temperature":3.205988142292483,"pressure":1100.5454545454545,"humidity":0.29347826086956524}',
  level: 'debug',
  timestamp: '2025-02-20T13:35:02.782Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:35:02.827Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:35:12.701Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:35:12.746Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:35:12.791Z'
}
{
  message: '{"temperature":2.9493043478260716,"pressure":1012.4860869565217,"humidity":0.27}',
  level: 'debug',
  timestamp: '2025-02-20T13:35:12.791Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:35:12.836Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:35:15.678Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T13:35:15.683Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:35:15.684Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T13:35:15.684Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:35:31.027Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:35:31.075Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:35:31.123Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:35:31.123Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:35:31.169Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:35:41.028Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:35:41.074Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:35:41.119Z'
}
{
  message: '{"temperature":147.49,"pressure":50624,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T13:35:41.120Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:35:41.165Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:35:51.034Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:35:51.080Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:35:51.125Z'
}
{
  message: '{"temperature":88.48999999999997,"pressure":30374.8,"humidity":8.1}',
  level: 'debug',
  timestamp: '2025-02-20T13:35:51.126Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:35:51.171Z'
}
{
  message: 'Syncing 204',
  level: 'info',
  timestamp: '2025-02-20T13:36:05.142Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:06.757Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:06.803Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:06.849Z'
}
{
  message: '{"temperature":58.99199999999993,"pressure":20250,"humidity":5.4}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:06.849Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:06.895Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:16.767Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:16.812Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:16.857Z'
}
{
  message: '{"temperature":42.13657142857139,"pressure":14464.342857142858,"humidity":3.857142857142857}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:16.858Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:16.903Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:26.777Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:26.822Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:26.868Z'
}
{
  message: '{"temperature":31.602142857142805,"pressure":10848.285714285714,"humidity":2.892857142857143}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:26.868Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:26.913Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:36.788Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:36.833Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:36.879Z'
}
{
  message: '{"temperature":24.579285714285646,"pressure":8437.57142857143,"humidity":2.25}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:36.880Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:36.926Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:46.798Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:46.844Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:46.890Z'
}
{
  message: '{"temperature":19.661999999999967,"pressure":6749.933333333333,"humidity":1.8}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:46.890Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:46.936Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:36:56.808Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:36:56.854Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:36:56.899Z'
}
{
  message: '{"temperature":16.08727272727269,"pressure":5522.703030303031,"humidity":1.4727272727272727}',
  level: 'debug',
  timestamp: '2025-02-20T13:36:56.899Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:36:56.944Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:06.817Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:06.863Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:06.909Z'
}
{
  message: '{"temperature":13.407090909090874,"pressure":4602.181818181818,"humidity":1.2272727272727273}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:06.909Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:06.954Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:16.829Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:16.875Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:16.922Z'
}
{
  message: '{"temperature":11.344405594405561,"pressure":3894.181818181818,"humidity":1.0384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:16.922Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:16.968Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:26.839Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:26.884Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:26.929Z'
}
{
  message: '{"temperature":9.723736263736233,"pressure":3337.8901098901097,"humidity":0.8901098901098901}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:26.930Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:26.975Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:36.849Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:36.895Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:36.940Z'
}
{
  message: '{"temperature":8.427208791208765,"pressure":2892.852747252747,"humidity":0.7714285714285715}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:36.941Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:36.987Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:46.858Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:46.903Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:46.949Z'
}
{
  message: '{"temperature":7.373785714285706,"pressure":2531.2571428571428,"humidity":0.675}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:46.949Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:46.994Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:37:56.867Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:37:56.913Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:37:56.958Z'
}
{
  message: '{"temperature":6.506264705882345,"pressure":2233.470588235294,"humidity":0.5955882352941176}',
  level: 'debug',
  timestamp: '2025-02-20T13:37:56.958Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:37:57.009Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:06.876Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:06.921Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:06.966Z'
}
{
  message: '{"temperature":5.782941176470586,"pressure":1985.2745098039215,"humidity":0.5294117647058824}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:06.966Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:07.011Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:16.885Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:16.930Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:16.975Z'
}
{
  message: '{"temperature":5.174241486068118,"pressure":1776.3075335397316,"humidity":0.47368421052631576}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:16.976Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:17.021Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:26.895Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:27.048Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:27.093Z'
}
{
  message: '{"temperature":4.6571578947368435,"pressure":1598.6526315789474,"humidity":0.4263157894736842}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:27.094Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:27.139Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:36.906Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:36.951Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:36.996Z'
}
{
  message: '{"temperature":4.213609022556391,"pressure":1446.409022556391,"humidity":0.38571428571428573}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:36.996Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:37.041Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:46.915Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:46.961Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:47.006Z'
}
{
  message: '{"temperature":3.83054545454545,"pressure":1314.9246753246753,"humidity":0.35064935064935066}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:47.007Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:47.052Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:38:56.926Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:38:56.972Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:38:57.017Z'
}
{
  message: '{"temperature":3.497447769621684,"pressure":1200.5894974590626,"humidity":0.3201581027667984}',
  level: 'debug',
  timestamp: '2025-02-20T13:38:57.017Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:38:57.062Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:06.979Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:07.025Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:07.070Z'
}
{
  message: '{"temperature":3.205988142292483,"pressure":1100.5454545454545,"humidity":0.29347826086956524}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:07.071Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:07.116Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:16.941Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:16.986Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:17.031Z'
}
{
  message: '{"temperature":2.949504347826081,"pressure":1012.5060869565217,"humidity":0.27}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:17.031Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:17.077Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:26.950Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:26.995Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:27.041Z'
}
{
  message: '{"temperature":2.7224307692307694,"pressure":934.6061538461538,"humidity":0.24923076923076923}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:27.041Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:27.086Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:36.961Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:37.006Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:37.051Z'
}
{
  message: '{"temperature":2.5207794871794906,"pressure":865.3805128205129,"humidity":0.23076923076923078}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:37.052Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:37.097Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:46.970Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:47.015Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:47.061Z'
}
{
  message: '{"temperature":2.3408913308913153,"pressure":803.5555555555555,"humidity":0.21428571428571427}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:47.062Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:47.107Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:39:56.980Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:39:57.025Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:39:57.070Z'
}
{
  message: '{"temperature":2.1794471811713065,"pressure":748.1423097974822,"humidity":0.19950738916256158}',
  level: 'debug',
  timestamp: '2025-02-20T13:39:57.070Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:39:57.115Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:40:00.055Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:06.986Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:07.031Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:07.077Z'
}
{
  message: '{"temperature":2.0341477832512282,"pressure":698.2699507389162,"humidity":0.18620689655172415}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:07.077Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:07.123Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:16.995Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:17.040Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:17.085Z'
}
{
  message: '{"temperature":1.9029098998887612,"pressure":653.2235817575083,"humidity":0.17419354838709677}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:17.086Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:17.131Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:27.006Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:27.051Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:27.097Z'
}
{
  message: '{"temperature":1.7839758064516198,"pressure":612.4,"humidity":0.16330645161290322}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:27.097Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:27.142Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:37.014Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:37.060Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:37.105Z'
}
{
  message: '{"temperature":1.6757404692082052,"pressure":575.2760263929619,"humidity":0.1534090909090909}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:37.105Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:37.151Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:47.023Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:47.071Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:47.116Z'
}
{
  message: '{"temperature":1.57717245989305,"pressure":541.4391711229947,"humidity":0.1443850267379679}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:47.116Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:47.161Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:40:57.034Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:40:57.079Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:40:57.124Z'
}
{
  message: '{"temperature":1.48715355233002,"pressure":510.49228418640183,"humidity":0.1361344537815126}',
  level: 'debug',
  timestamp: '2025-02-20T13:40:57.124Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:40:57.169Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:07.043Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:07.088Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:07.134Z'
}
{
  message: '{"temperature":1.4045322128851674,"pressure":482.1344537815126,"humidity":0.12857142857142856}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:07.134Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:07.179Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:17.054Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:17.100Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:17.145Z'
}
{
  message: '{"temperature":1.3286100386100546,"pressure":456.07567567567565,"humidity":0.12162162162162163}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:17.146Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:17.191Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:27.065Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:27.110Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:27.156Z'
}
{
  message: '{"temperature":1.2586818397344859,"pressure":432.07396870554766,"humidity":0.11522048364153627}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:27.157Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:27.203Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:37.068Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:37.113Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:37.159Z'
}
{
  message: '{"temperature":1.1941328372907476,"pressure":409.91837181310865,"humidity":0.10931174089068826}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:37.159Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:37.204Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:47.078Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:47.123Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:47.168Z'
}
{
  message: '{"temperature":1.1344251012145934,"pressure":389.42429149797573,"humidity":0.10384615384615385}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:47.169Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:47.214Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:41:57.088Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:41:57.133Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:41:57.178Z'
}
{
  message: '{"temperature":1.0790131332082709,"pressure":370.4223264540338,"humidity":0.09878048780487805}',
  level: 'debug',
  timestamp: '2025-02-20T13:41:57.178Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:41:57.223Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:07.097Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:07.142Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:07.187Z'
}
{
  message: '{"temperature":1.0276341463414789,"pressure":352.7850174216028,"humidity":0.09407665505226481}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:07.187Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:07.232Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:17.108Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:17.153Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:17.198Z'
}
{
  message: '{"temperature":0.9799060043756797,"pressure":336.3714447775707,"humidity":0.08970099667774087}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:17.198Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:17.243Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:27.117Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:27.163Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:27.208Z'
}
{
  message: '{"temperature":0.9353639383872093,"pressure":321.083660525521,"humidity":0.08562367864693446}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:27.208Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:27.253Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:37.128Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:37.174Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:37.219Z'
}
{
  message: '{"temperature":0.8937914023960679,"pressure":306.81494009866105,"humidity":0.08181818181818182}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:37.220Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:37.265Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:47.135Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:47.181Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:47.227Z'
}
{
  message: '{"temperature":0.8549301712780148,"pressure":293.47667984189724,"humidity":0.0782608695652174}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:47.227Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:47.274Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:42:57.145Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:42:57.190Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:42:57.235Z'
}
{
  message: '{"temperature":0.8185494912118595,"pressure":280.98970089423375,"humidity":0.07493061979648474}',
  level: 'debug',
  timestamp: '2025-02-20T13:42:57.235Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:42:57.281Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:07.156Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:07.201Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:07.248Z'
}
{
  message: '{"temperature":0.7844426456984456,"pressure":269.2830712303423,"humidity":0.07180851063829788}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:07.248Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:07.293Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:17.159Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:17.205Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:17.251Z'
}
{
  message: '{"temperature":0.7523729917499068,"pressure":258.28799392097267,"humidity":0.06887755102040816}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:17.251Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:17.296Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:27.169Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:27.215Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:27.260Z'
}
{
  message: '{"temperature":0.7222795918367544,"pressure":247.9577551020408,"humidity":0.06612244897959184}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:27.260Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:27.305Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:37.179Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:37.338Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:37.384Z'
}
{
  message: '{"temperature":0.6940033613445593,"pressure":238.23039615846338,"humidity":0.06352941176470588}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:37.384Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:37.429Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:47.182Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:47.228Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:47.273Z'
}
{
  message: '{"temperature":0.6673104072398409,"pressure":229.0689592760181,"humidity":0.06108597285067873}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:47.274Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:47.319Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:43:57.291Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:43:57.337Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:43:57.382Z'
}
{
  message: '{"temperature":0.6421284043370858,"pressure":220.4260223683087,"humidity":0.05878084179970972}',
  level: 'debug',
  timestamp: '2025-02-20T13:43:57.382Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:43:57.428Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:44:07.195Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:44:07.240Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:44:07.285Z'
}
{
  message: '{"temperature":0.6183454281567775,"pressure":212.263183357523,"humidity":0.05660377358490566}',
  level: 'debug',
  timestamp: '2025-02-20T13:44:07.285Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:44:07.330Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:44:17.198Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:44:17.243Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:44:17.288Z'
}
{
  message: '{"temperature":0.595859729369192,"pressure":204.54553077949305,"humidity":0.05454545454545454}',
  level: 'debug',
  timestamp: '2025-02-20T13:44:17.289Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:44:17.334Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:44:27.204Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:44:27.249Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:44:27.295Z'
}
{
  message: '{"temperature":0.5745786435786738,"pressure":197.24126984126985,"humidity":0.052597402597402594}',
  level: 'debug',
  timestamp: '2025-02-20T13:44:27.295Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:44:27.340Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:44:37.218Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:44:37.263Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:44:37.308Z'
}
{
  message: '{"temperature":0.5543800410116478,"pressure":190.31763499658237,"humidity":0.05075187969924812}',
  level: 'debug',
  timestamp: '2025-02-20T13:44:37.308Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:44:37.354Z'
}
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:44:40.458Z'
}
{ message: '{}', level: 'info', timestamp: '2025-02-20T13:44:40.461Z' }
{
  message: 'IC2 bus is Open, address is 72',
  level: 'info',
  timestamp: '2025-02-20T13:44:40.461Z'
}
{
  message: 'undefined',
  level: 'info',
  timestamp: '2025-02-20T13:44:40.462Z'
}
{
  message: 'Syncing 204',
  level: 'info',
  timestamp: '2025-02-20T13:44:58.234Z'
}
{
  message: 'Data sent to alef/sensor/all',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.045Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.088Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.134Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.179Z'
}
{
  message: '{"temperature":0,"pressure":0,"humidity":0}',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.180Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:45:06.227Z'
}
{
  message: 'Data sent to alef/sensor/temperature',
  level: 'debug',
  timestamp: '2025-02-20T13:45:16.048Z'
}
{
  message: 'Data sent to alef/sensor/pressure',
  level: 'debug',
  timestamp: '2025-02-20T13:45:16.094Z'
}
{
  message: 'Data sent to alef/sensor/humidity',
  level: 'debug',
  timestamp: '2025-02-20T13:45:16.139Z'
}
{
  message: '{"temperature":147.47999999999993,"pressure":50625,"humidity":13.5}',
  level: 'debug',
  timestamp: '2025-02-20T13:45:16.140Z'
}
{
  message: 'Data sent to alef/sensor/trend',
  level: 'debug',
  timestamp: '2025-02-20T13:45:16.186Z'
}
